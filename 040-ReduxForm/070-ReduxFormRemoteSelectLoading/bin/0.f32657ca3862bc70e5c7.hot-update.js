webpackHotUpdate(0,{455:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(19);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_freeGlobal.js\nvar _freeGlobal = __webpack_require__(160);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_root.js\n\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == \'object\' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = _freeGlobal["a" /* default */] || freeSelf || Function(\'return this\')();\n\n/* harmony default export */ var _root = (root);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_Symbol.js\n\n\n/** Built-in value references. */\nvar _Symbol_Symbol = _root.Symbol;\n\n/* harmony default export */ var _Symbol = (_Symbol_Symbol);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_getRawTag.js\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ var _getRawTag = (getRawTag);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_objectToString.js\n/** Used for built-in method references. */\nvar _objectToString_objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar _objectToString_nativeObjectToString = _objectToString_objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return _objectToString_nativeObjectToString.call(value);\n}\n\n/* harmony default export */ var _objectToString = (objectToString);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_baseGetTag.js\n\n\n\n\n/** `Object#toString` result references. */\nvar nullTag = \'[object Null]\',\n    undefinedTag = \'[object Undefined]\';\n\n/** Built-in value references. */\nvar _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))\n    ? _getRawTag(value)\n    : _objectToString(value);\n}\n\n/* harmony default export */ var _baseGetTag = (baseGetTag);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_overArg.js\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* harmony default export */ var _overArg = (overArg);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/_getPrototype.js\n\n\n/** Built-in value references. */\nvar getPrototype = _overArg(Object.getPrototypeOf, Object);\n\n/* harmony default export */ var _getPrototype = (getPrototype);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/isObjectLike.js\n/**\n * Checks if `value` is object-like. A value is object-like if it\'s not `null`\n * and has a `typeof` result of "object".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == \'object\';\n}\n\n/* harmony default export */ var lodash_es_isObjectLike = (isObjectLike);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash-es/isPlainObject.js\n\n\n\n\n/** `Object#toString` result references. */\nvar objectTag = \'[object Object]\';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    isPlainObject_objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar isPlainObject_hasOwnProperty = isPlainObject_objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ \'x\': 0, \'y\': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!lodash_es_isObjectLike(value) || _baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = _getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = isPlainObject_hasOwnProperty.call(proto, \'constructor\') && proto.constructor;\n  return typeof Ctor == \'function\' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\n/* harmony default export */ var lodash_es_isPlainObject = (isPlainObject);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/symbol-observable/es/index.js\nvar es = __webpack_require__(60);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/createStore.js\n\n\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar ActionTypes = {\n  INIT: \'@@redux/INIT\'\n\n  /**\n   * Creates a Redux store that holds the state tree.\n   * The only way to change the data in the store is to call `dispatch()` on it.\n   *\n   * There should only be a single store in your app. To specify how different\n   * parts of the state tree respond to actions, you may combine several reducers\n   * into a single reducer function by using `combineReducers`.\n   *\n   * @param {Function} reducer A function that returns the next state tree, given\n   * the current state tree and the action to handle.\n   *\n   * @param {any} [preloadedState] The initial state. You may optionally specify it\n   * to hydrate the state from the server in universal apps, or to restore a\n   * previously serialized user session.\n   * If you use `combineReducers` to produce the root reducer function, this must be\n   * an object with the same shape as `combineReducers` keys.\n   *\n   * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n   * to enhance the store with third-party capabilities such as middleware,\n   * time travel, persistence, etc. The only store enhancer that ships with Redux\n   * is `applyMiddleware()`.\n   *\n   * @returns {Store} A Redux store that lets you read the state, dispatch actions\n   * and subscribe to changes.\n   */\n};function createStore_createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === \'function\' && typeof enhancer === \'undefined\') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== \'undefined\') {\n    if (typeof enhancer !== \'function\') {\n      throw new Error(\'Expected the enhancer to be a function.\');\n    }\n\n    return enhancer(createStore_createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== \'function\') {\n    throw new Error(\'Expected the reducer to be a function.\');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    if (typeof listener !== \'function\') {\n      throw new Error(\'Expected listener to be a function.\');\n    }\n\n    var isSubscribed = true;\n\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      isSubscribed = false;\n\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!lodash_es_isPlainObject(action)) {\n      throw new Error(\'Actions must be plain objects. \' + \'Use custom middleware for async actions.\');\n    }\n\n    if (typeof action.type === \'undefined\') {\n      throw new Error(\'Actions may not have an undefined "type" property. \' + \'Have you misspelled a constant?\');\n    }\n\n    if (isDispatching) {\n      throw new Error(\'Reducers may not dispatch actions.\');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== \'function\') {\n      throw new Error(\'Expected the nextReducer to be a function.\');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== \'object\') {\n          throw new TypeError(\'Expected the observer to be an object.\');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return { unsubscribe: unsubscribe };\n      }\n    }, _ref[es["default"]] = function () {\n      return this;\n    }, _ref;\n  }\n\n  // When a store is created, an "INIT" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[es["default"]] = observable, _ref2;\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/utils/warning.js\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning_warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== \'undefined\' && typeof console.error === \'function\') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // "break on all exceptions" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/combineReducers.js\n\n\n\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionName = actionType && \'"\' + actionType.toString() + \'"\' || \'an action\';\n\n  return \'Given action \' + actionName + \', reducer "\' + key + \'" returned undefined. \' + \'To ignore an action, you must explicitly return the previous state. \' + \'If you want this reducer to hold no value, you can return null instead of undefined.\';\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? \'preloadedState argument passed to createStore\' : \'previous state received by the reducer\';\n\n  if (reducerKeys.length === 0) {\n    return \'Store does not have a valid reducer. Make sure the argument passed \' + \'to combineReducers is an object whose values are reducers.\';\n  }\n\n  if (!lodash_es_isPlainObject(inputState)) {\n    return \'The \' + argumentName + \' has unexpected type of "\' + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \'". Expected argument to be an object with the following \' + (\'keys: "\' + reducerKeys.join(\'", "\') + \'"\');\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n\n  if (unexpectedKeys.length > 0) {\n    return \'Unexpected \' + (unexpectedKeys.length > 1 ? \'keys\' : \'key\') + \' \' + (\'"\' + unexpectedKeys.join(\'", "\') + \'" found in \' + argumentName + \'. \') + \'Expected to find one of the known reducer keys instead: \' + (\'"\' + reducerKeys.join(\'", "\') + \'". Unexpected keys will be ignored.\');\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, { type: ActionTypes.INIT });\n\n    if (typeof initialState === \'undefined\') {\n      throw new Error(\'Reducer "\' + key + \'" returned undefined during initialization. \' + \'If the state passed to the reducer is undefined, you must \' + \'explicitly return the initial state. The initial state may \' + \'not be undefined. If you don\\\'t want to set a value for this reducer, \' + \'you can use null instead of undefined.\');\n    }\n\n    var type = \'@@redux/PROBE_UNKNOWN_ACTION_\' + Math.random().toString(36).substring(7).split(\'\').join(\'.\');\n    if (typeof reducer(undefined, { type: type }) === \'undefined\') {\n      throw new Error(\'Reducer "\' + key + \'" returned undefined when probed with a random type. \' + (\'Don\\\'t try to handle \' + ActionTypes.INIT + \' or other actions in "redux/*" \') + \'namespace. They are considered private. Instead, you must return the \' + \'current state for any unknown actions, unless it is undefined, \' + \'in which case you must return the initial state, regardless of the \' + \'action type. The initial state may not be undefined, but can be null.\');\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (false) {}\n\n    if (typeof reducers[key] === \'function\') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  var finalReducerKeys = Object.keys(finalReducers);\n\n  var unexpectedKeyCache = void 0;\n  if (false) {}\n\n  var shapeAssertionError = void 0;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments[1];\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (false) { var warningMessage; }\n\n    var hasChanged = false;\n    var nextState = {};\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === \'undefined\') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/bindActionCreators.js\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(undefined, arguments));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === \'function\') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== \'object\' || actionCreators === null) {\n    throw new Error(\'bindActionCreators expected an object or a function, instead received \' + (actionCreators === null ? \'null\' : typeof actionCreators) + \'. \' + \'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?\');\n  }\n\n  var keys = Object.keys(actionCreators);\n  var boundActionCreators = {};\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var actionCreator = actionCreators[key];\n    if (typeof actionCreator === \'function\') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/compose.js\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(undefined, arguments));\n    };\n  });\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/applyMiddleware.js\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function (reducer, preloadedState, enhancer) {\n      var store = createStore(reducer, preloadedState, enhancer);\n      var _dispatch = store.dispatch;\n      var chain = [];\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch(action) {\n          return _dispatch(action);\n        }\n      };\n      chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(undefined, chain)(store.dispatch);\n\n      return _extends({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux/es/index.js\n\n\n\n\n\n\n\n/*\n* This is a dummy function to check if the function name has been altered by minification.\n* If the function has been minified and NODE_ENV !== \'production\', warn the user.\n*/\nfunction isCrushed() {}\n\nif (false) {}\n\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\nvar objectWithoutPropertiesLoose = __webpack_require__(15);\nvar objectWithoutPropertiesLoose_default = /*#__PURE__*/__webpack_require__.n(objectWithoutPropertiesLoose);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash/isFunction.js\nvar isFunction = __webpack_require__(44);\nvar isFunction_default = /*#__PURE__*/__webpack_require__.n(isFunction);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/actionTypes.js\nvar prefix = \'@@redux-form/\';\nvar ARRAY_INSERT = prefix + "ARRAY_INSERT";\nvar ARRAY_MOVE = prefix + "ARRAY_MOVE";\nvar ARRAY_POP = prefix + "ARRAY_POP";\nvar ARRAY_PUSH = prefix + "ARRAY_PUSH";\nvar ARRAY_REMOVE = prefix + "ARRAY_REMOVE";\nvar ARRAY_REMOVE_ALL = prefix + "ARRAY_REMOVE_ALL";\nvar ARRAY_SHIFT = prefix + "ARRAY_SHIFT";\nvar ARRAY_SPLICE = prefix + "ARRAY_SPLICE";\nvar ARRAY_UNSHIFT = prefix + "ARRAY_UNSHIFT";\nvar ARRAY_SWAP = prefix + "ARRAY_SWAP";\nvar AUTOFILL = prefix + "AUTOFILL";\nvar BLUR = prefix + "BLUR";\nvar CHANGE = prefix + "CHANGE";\nvar CLEAR_FIELDS = prefix + "CLEAR_FIELDS";\nvar CLEAR_SUBMIT = prefix + "CLEAR_SUBMIT";\nvar CLEAR_SUBMIT_ERRORS = prefix + "CLEAR_SUBMIT_ERRORS";\nvar CLEAR_ASYNC_ERROR = prefix + "CLEAR_ASYNC_ERROR";\nvar DESTROY = prefix + "DESTROY";\nvar FOCUS = prefix + "FOCUS";\nvar INITIALIZE = prefix + "INITIALIZE";\nvar REGISTER_FIELD = prefix + "REGISTER_FIELD";\nvar RESET = prefix + "RESET";\nvar RESET_SECTION = prefix + "RESET_SECTION";\nvar SET_SUBMIT_FAILED = prefix + "SET_SUBMIT_FAILED";\nvar SET_SUBMIT_SUCCEEDED = prefix + "SET_SUBMIT_SUCCEEDED";\nvar START_ASYNC_VALIDATION = prefix + "START_ASYNC_VALIDATION";\nvar START_SUBMIT = prefix + "START_SUBMIT";\nvar STOP_ASYNC_VALIDATION = prefix + "STOP_ASYNC_VALIDATION";\nvar STOP_SUBMIT = prefix + "STOP_SUBMIT";\nvar SUBMIT = prefix + "SUBMIT";\nvar TOUCH = prefix + "TOUCH";\nvar UNREGISTER_FIELD = prefix + "UNREGISTER_FIELD";\nvar UNTOUCH = prefix + "UNTOUCH";\nvar UPDATE_SYNC_ERRORS = prefix + "UPDATE_SYNC_ERRORS";\nvar UPDATE_SYNC_WARNINGS = prefix + "UPDATE_SYNC_WARNINGS";\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash/toPath.js\nvar toPath = __webpack_require__(24);\nvar toPath_default = /*#__PURE__*/__webpack_require__.n(toPath);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/deleteInWithCleanUp.js\n\n\nfunction createDeleteInWithCleanUp(structure) {\n  var shouldDeleteDefault = function shouldDeleteDefault(structure) {\n    return function (state, path) {\n      return structure.getIn(state, path) !== undefined;\n    };\n  };\n\n  var deepEqual = structure.deepEqual,\n      empty = structure.empty,\n      getIn = structure.getIn,\n      deleteIn = structure.deleteIn,\n      setIn = structure.setIn;\n  return function (shouldDelete) {\n    if (shouldDelete === void 0) {\n      shouldDelete = shouldDeleteDefault;\n    }\n\n    var deleteInWithCleanUp = function deleteInWithCleanUp(state, path) {\n      if (path[path.length - 1] === \']\') {\n        // array path\n        var pathTokens = toPath_default()(path);\n\n        pathTokens.pop();\n        var parent = getIn(state, pathTokens.join(\'.\'));\n        return parent ? setIn(state, path) : state;\n      }\n\n      var result = state;\n\n      if (shouldDelete(structure)(state, path)) {\n        result = deleteIn(state, path);\n      }\n\n      var dotIndex = path.lastIndexOf(\'.\');\n\n      if (dotIndex > 0) {\n        var parentPath = path.substring(0, dotIndex);\n\n        if (parentPath[parentPath.length - 1] !== \']\') {\n          var _parent = getIn(result, parentPath);\n\n          if (deepEqual(_parent, empty)) {\n            return deleteInWithCleanUp(result, parentPath);\n          }\n        }\n      }\n\n      return result;\n    };\n\n    return deleteInWithCleanUp;\n  };\n}\n\n/* harmony default export */ var es_deleteInWithCleanUp = (createDeleteInWithCleanUp);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/splice.js\nvar splice_splice = function splice(array, index, removeNum, value) {\n  array = array || [];\n\n  if (index < array.length) {\n    if (value === undefined && !removeNum) {\n      // inserting undefined\n      var _copy2 = [].concat(array);\n\n      _copy2.splice(index, 0, true); // temporary placeholder\n\n\n      _copy2[index] = undefined; // set to undefined\n\n      return _copy2;\n    }\n\n    if (value != null) {\n      var _copy3 = [].concat(array);\n\n      _copy3.splice(index, removeNum, value); // removing and adding\n\n\n      return _copy3;\n    }\n\n    var _copy = [].concat(array);\n\n    _copy.splice(index, removeNum); // removing\n\n\n    return _copy;\n  }\n\n  if (removeNum) {\n    // trying to remove non-existant item: return original array\n    return array;\n  } // trying to add outside of range: just set value\n\n\n  var copy = [].concat(array);\n  copy[index] = value;\n  return copy;\n};\n\n/* harmony default export */ var plain_splice = (splice_splice);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/getIn.js\n\n\nvar getIn_getIn = function getIn(state, field) {\n  if (!state) {\n    return state;\n  }\n\n  var path = toPath_default()(field);\n\n  var length = path.length;\n\n  if (!length) {\n    return undefined;\n  }\n\n  var result = state;\n\n  for (var i = 0; i < length && result; ++i) {\n    result = result[path[i]];\n  }\n\n  return result;\n};\n\n/* harmony default export */ var plain_getIn = (getIn_getIn);\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/extends.js\nvar helpers_extends = __webpack_require__(3);\nvar extends_default = /*#__PURE__*/__webpack_require__.n(helpers_extends);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/setIn.js\n\n\n\nvar setIn_setInWithPath = function setInWithPath(state, value, path, pathIndex) {\n  var _extends2;\n\n  if (pathIndex >= path.length) {\n    return value;\n  }\n\n  var first = path[pathIndex];\n  var firstState = state && (Array.isArray(state) ? state[Number(first)] : state[first]);\n  var next = setInWithPath(firstState, value, path, pathIndex + 1);\n\n  if (!state) {\n    if (isNaN(first)) {\n      var _ref;\n\n      return _ref = {}, _ref[first] = next, _ref;\n    }\n\n    var initialized = [];\n    initialized[parseInt(first, 10)] = next;\n    return initialized;\n  }\n\n  if (Array.isArray(state)) {\n    var copy = [].concat(state);\n    copy[parseInt(first, 10)] = next;\n    return copy;\n  }\n\n  return extends_default()({}, state, (_extends2 = {}, _extends2[first] = next, _extends2));\n};\n\nvar setIn_setIn = function setIn(state, field, value) {\n  return setIn_setInWithPath(state, value, toPath_default()(field), 0);\n};\n\n/* harmony default export */ var plain_setIn = (setIn_setIn);\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash/isEqualWith.js\nvar isEqualWith = __webpack_require__(46);\nvar isEqualWith_default = /*#__PURE__*/__webpack_require__.n(isEqualWith);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/deepEqual.js\n\n\n\nvar deepEqual_customizer = function customizer(obj, other) {\n  if (obj === other) return true;\n\n  if (!obj && !other) {\n    var objIsEmpty = obj === null || obj === undefined || obj === \'\';\n    var otherIsEmpty = other === null || other === undefined || other === \'\';\n    return objIsEmpty === otherIsEmpty;\n  }\n\n  if (obj && other && obj._error !== other._error) return false;\n  if (obj && other && obj._warning !== other._warning) return false;\n  if (react_default.a.isValidElement(obj) || react_default.a.isValidElement(other)) return false;\n};\n\nvar deepEqual_deepEqual = function deepEqual(a, b) {\n  return isEqualWith_default()(a, b, deepEqual_customizer);\n};\n\n/* harmony default export */ var plain_deepEqual = (deepEqual_deepEqual);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/deleteIn.js\n\n\n\nfunction deleteInWithPath(state, first) {\n  if (state === undefined || state === null || first === undefined || first === null) {\n    return state;\n  }\n\n  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    rest[_key - 2] = arguments[_key];\n  }\n\n  if (rest.length) {\n    if (Array.isArray(state)) {\n      if (isNaN(first)) {\n        throw new Error("Must access array elements with a number, not \\"" + String(first) + "\\".");\n      }\n\n      var firstIndex = Number(first);\n\n      if (firstIndex < state.length) {\n        var result = deleteInWithPath.apply(void 0, [state && state[firstIndex]].concat(rest));\n\n        if (result !== state[firstIndex]) {\n          var copy = [].concat(state);\n          copy[firstIndex] = result;\n          return copy;\n        }\n      }\n\n      return state;\n    }\n\n    if (first in state) {\n      var _extends2;\n\n      var _result = deleteInWithPath.apply(void 0, [state && state[first]].concat(rest));\n\n      return state[first] === _result ? state : extends_default()({}, state, (_extends2 = {}, _extends2[first] = _result, _extends2));\n    }\n\n    return state;\n  }\n\n  if (Array.isArray(state)) {\n    if (isNaN(first)) {\n      throw new Error("Cannot delete non-numerical index from an array. Given: \\"" + String(first));\n    }\n\n    var _firstIndex = Number(first);\n\n    if (_firstIndex < state.length) {\n      var _copy = [].concat(state);\n\n      _copy.splice(_firstIndex, 1);\n\n      return _copy;\n    }\n\n    return state;\n  }\n\n  if (first in state) {\n    var _copy2 = extends_default()({}, state);\n\n    delete _copy2[first];\n    return _copy2;\n  }\n\n  return state;\n}\n\nvar deleteIn_deleteIn = function deleteIn(state, field) {\n  return deleteInWithPath.apply(void 0, [state].concat(toPath_default()(field)));\n};\n\n/* harmony default export */ var plain_deleteIn = (deleteIn_deleteIn);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/keys.js\nfunction keys_keys(value) {\n  if (!value) {\n    return [];\n  }\n\n  if (Array.isArray(value)) {\n    return value.map(function (i) {\n      return i.name;\n    });\n  }\n\n  return Object.keys(value);\n}\n\n/* harmony default export */ var plain_keys = (keys_keys);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/structure/plain/index.js\n\n\n\n\n\n\nvar plain_structure = {\n  allowsArrayErrors: true,\n  empty: {},\n  emptyList: [],\n  getIn: plain_getIn,\n  setIn: plain_setIn,\n  deepEqual: plain_deepEqual,\n  deleteIn: plain_deleteIn,\n  forEach: function forEach(items, callback) {\n    return items.forEach(callback);\n  },\n  fromJS: function fromJS(value) {\n    return value;\n  },\n  keys: plain_keys,\n  size: function size(array) {\n    return array ? array.length : 0;\n  },\n  some: function some(items, callback) {\n    return items.some(callback);\n  },\n  splice: plain_splice,\n  equals: function equals(a, b) {\n    return b.every(function (val) {\n      return ~a.indexOf(val);\n    });\n  },\n  orderChanged: function orderChanged(a, b) {\n    return b.some(function (val, index) {\n      return val !== a[index];\n    });\n  },\n  toJS: function toJS(value) {\n    return value;\n  }\n};\n/* harmony default export */ var plain = (plain_structure);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/createReducer.js\n\n\n\n\n\n\nvar createReducer_shouldDelete = function shouldDelete(_ref) {\n  var getIn = _ref.getIn;\n  return function (state, path) {\n    var initialValuesPath = null;\n\n    if (/^values/.test(path)) {\n      initialValuesPath = path.replace(\'values\', \'initial\');\n    }\n\n    var initialValueComparison = initialValuesPath ? getIn(state, initialValuesPath) === undefined : true;\n    return getIn(state, path) !== undefined && initialValueComparison;\n  };\n};\n\nvar createReducer_isReduxFormAction = function isReduxFormAction(action) {\n  return action && action.type && action.type.length > prefix.length && action.type.substring(0, prefix.length) === prefix;\n};\n\nfunction createReducer(structure) {\n  var _behaviors;\n\n  var deepEqual = structure.deepEqual,\n      empty = structure.empty,\n      forEach = structure.forEach,\n      getIn = structure.getIn,\n      setIn = structure.setIn,\n      deleteIn = structure.deleteIn,\n      fromJS = structure.fromJS,\n      keys = structure.keys,\n      size = structure.size,\n      some = structure.some,\n      splice = structure.splice;\n  var deleteInWithCleanUp = es_deleteInWithCleanUp(structure)(createReducer_shouldDelete);\n  var plainDeleteInWithCleanUp = es_deleteInWithCleanUp(plain)(createReducer_shouldDelete);\n\n  var doSplice = function doSplice(state, key, field, index, removeNum, value, force) {\n    var existing = getIn(state, key + "." + field);\n    return existing || force ? setIn(state, key + "." + field, splice(existing, index, removeNum, value)) : state;\n  };\n\n  var doPlainSplice = function doPlainSplice(state, key, field, index, removeNum, value, force) {\n    var slice = getIn(state, key);\n    var existing = plain.getIn(slice, field);\n    return existing || force ? setIn(state, key, plain.setIn(slice, field, plain.splice(existing, index, removeNum, value))) : state;\n  };\n\n  var rootKeys = [\'values\', \'fields\', \'submitErrors\', \'asyncErrors\'];\n\n  var arraySplice = function arraySplice(state, field, index, removeNum, value) {\n    var result = state;\n    var nonValuesValue = value != null ? empty : undefined;\n    result = doSplice(result, \'values\', field, index, removeNum, value, true);\n    result = doSplice(result, \'fields\', field, index, removeNum, nonValuesValue);\n    result = doPlainSplice(result, \'syncErrors\', field, index, removeNum, undefined);\n    result = doPlainSplice(result, \'syncWarnings\', field, index, removeNum, undefined);\n    result = doSplice(result, \'submitErrors\', field, index, removeNum, undefined);\n    result = doSplice(result, \'asyncErrors\', field, index, removeNum, undefined);\n    return result;\n  };\n\n  var behaviors = (_behaviors = {}, _behaviors[ARRAY_INSERT] = function (state, _ref2) {\n    var _ref2$meta = _ref2.meta,\n        field = _ref2$meta.field,\n        index = _ref2$meta.index,\n        payload = _ref2.payload;\n    return arraySplice(state, field, index, 0, payload);\n  }, _behaviors[ARRAY_MOVE] = function (state, _ref3) {\n    var _ref3$meta = _ref3.meta,\n        field = _ref3$meta.field,\n        from = _ref3$meta.from,\n        to = _ref3$meta.to;\n    var array = getIn(state, "values." + field);\n    var length = array ? size(array) : 0;\n    var result = state;\n\n    if (length) {\n      rootKeys.forEach(function (key) {\n        var path = key + "." + field;\n\n        if (getIn(result, path)) {\n          var value = getIn(result, path + "[" + from + "]");\n          result = setIn(result, path, splice(getIn(result, path), from, 1)); // remove\n\n          result = setIn(result, path, splice(getIn(result, path), to, 0, value)); // insert\n        }\n      });\n    }\n\n    return result;\n  }, _behaviors[ARRAY_POP] = function (state, _ref4) {\n    var field = _ref4.meta.field;\n    var array = getIn(state, "values." + field);\n    var length = array ? size(array) : 0;\n    return length ? arraySplice(state, field, length - 1, 1) : state;\n  }, _behaviors[ARRAY_PUSH] = function (state, _ref5) {\n    var field = _ref5.meta.field,\n        payload = _ref5.payload;\n    var array = getIn(state, "values." + field);\n    var length = array ? size(array) : 0;\n    return arraySplice(state, field, length, 0, payload);\n  }, _behaviors[ARRAY_REMOVE] = function (state, _ref6) {\n    var _ref6$meta = _ref6.meta,\n        field = _ref6$meta.field,\n        index = _ref6$meta.index;\n    return arraySplice(state, field, index, 1);\n  }, _behaviors[ARRAY_REMOVE_ALL] = function (state, _ref7) {\n    var field = _ref7.meta.field;\n    var array = getIn(state, "values." + field);\n    var length = array ? size(array) : 0;\n    return length ? arraySplice(state, field, 0, length) : state;\n  }, _behaviors[ARRAY_SHIFT] = function (state, _ref8) {\n    var field = _ref8.meta.field;\n    return arraySplice(state, field, 0, 1);\n  }, _behaviors[ARRAY_SPLICE] = function (state, _ref9) {\n    var _ref9$meta = _ref9.meta,\n        field = _ref9$meta.field,\n        index = _ref9$meta.index,\n        removeNum = _ref9$meta.removeNum,\n        payload = _ref9.payload;\n    return arraySplice(state, field, index, removeNum, payload);\n  }, _behaviors[ARRAY_SWAP] = function (state, _ref10) {\n    var _ref10$meta = _ref10.meta,\n        field = _ref10$meta.field,\n        indexA = _ref10$meta.indexA,\n        indexB = _ref10$meta.indexB;\n    var result = state;\n    rootKeys.forEach(function (key) {\n      var valueA = getIn(result, key + "." + field + "[" + indexA + "]");\n      var valueB = getIn(result, key + "." + field + "[" + indexB + "]");\n\n      if (valueA !== undefined || valueB !== undefined) {\n        result = setIn(result, key + "." + field + "[" + indexA + "]", valueB);\n        result = setIn(result, key + "." + field + "[" + indexB + "]", valueA);\n      }\n    });\n    return result;\n  }, _behaviors[ARRAY_UNSHIFT] = function (state, _ref11) {\n    var field = _ref11.meta.field,\n        payload = _ref11.payload;\n    return arraySplice(state, field, 0, 0, payload);\n  }, _behaviors[AUTOFILL] = function (state, _ref12) {\n    var field = _ref12.meta.field,\n        payload = _ref12.payload;\n    var result = state;\n    result = deleteInWithCleanUp(result, "asyncErrors." + field);\n    result = deleteInWithCleanUp(result, "submitErrors." + field);\n    result = setIn(result, "fields." + field + ".autofilled", true);\n    result = setIn(result, "values." + field, payload);\n    return result;\n  }, _behaviors[BLUR] = function (state, _ref13) {\n    var _ref13$meta = _ref13.meta,\n        field = _ref13$meta.field,\n        touch = _ref13$meta.touch,\n        payload = _ref13.payload;\n    var result = state;\n    var initial = getIn(result, "initial." + field);\n\n    if (initial === undefined && payload === \'\') {\n      result = deleteInWithCleanUp(result, "values." + field);\n    } else if (payload !== undefined) {\n      result = setIn(result, "values." + field, payload);\n    }\n\n    if (field === getIn(result, \'active\')) {\n      result = deleteIn(result, \'active\');\n    }\n\n    result = deleteIn(result, "fields." + field + ".active");\n\n    if (touch) {\n      result = setIn(result, "fields." + field + ".touched", true);\n      result = setIn(result, \'anyTouched\', true);\n    }\n\n    return result;\n  }, _behaviors[CHANGE] = function (state, _ref14) {\n    var _ref14$meta = _ref14.meta,\n        field = _ref14$meta.field,\n        touch = _ref14$meta.touch,\n        persistentSubmitErrors = _ref14$meta.persistentSubmitErrors,\n        payload = _ref14.payload;\n    var result = state;\n    var initial = getIn(result, "initial." + field);\n\n    if (initial === undefined && payload === \'\') {\n      result = deleteInWithCleanUp(result, "values." + field);\n    } else if (isFunction_default()(payload)) {\n      var fieldCurrentValue = getIn(state, "values." + field);\n      result = setIn(result, "values." + field, payload(fieldCurrentValue, state.values));\n    } else if (payload !== undefined) {\n      result = setIn(result, "values." + field, payload);\n    }\n\n    result = deleteInWithCleanUp(result, "asyncErrors." + field);\n\n    if (!persistentSubmitErrors) {\n      result = deleteInWithCleanUp(result, "submitErrors." + field);\n    }\n\n    result = deleteInWithCleanUp(result, "fields." + field + ".autofilled");\n\n    if (touch) {\n      result = setIn(result, "fields." + field + ".touched", true);\n      result = setIn(result, \'anyTouched\', true);\n    }\n\n    return result;\n  }, _behaviors[CLEAR_SUBMIT] = function (state) {\n    return deleteIn(state, \'triggerSubmit\');\n  }, _behaviors[CLEAR_SUBMIT_ERRORS] = function (state) {\n    var result = state;\n    result = deleteInWithCleanUp(result, \'submitErrors\');\n    result = deleteIn(result, \'error\');\n    return result;\n  }, _behaviors[CLEAR_ASYNC_ERROR] = function (state, _ref15) {\n    var field = _ref15.meta.field;\n    return deleteIn(state, "asyncErrors." + field);\n  }, _behaviors[CLEAR_FIELDS] = function (state, _ref16) {\n    var _ref16$meta = _ref16.meta,\n        keepTouched = _ref16$meta.keepTouched,\n        persistentSubmitErrors = _ref16$meta.persistentSubmitErrors,\n        fields = _ref16$meta.fields;\n    var result = state;\n    fields.forEach(function (field) {\n      result = deleteInWithCleanUp(result, "values." + field);\n      result = deleteInWithCleanUp(result, "asyncErrors." + field);\n\n      if (!persistentSubmitErrors) {\n        result = deleteInWithCleanUp(result, "submitErrors." + field);\n      }\n\n      result = deleteInWithCleanUp(result, "fields." + field + ".autofilled");\n\n      if (!keepTouched) {\n        result = deleteIn(result, "fields." + field + ".touched");\n      }\n    });\n    var anyTouched = some(keys(getIn(result, \'registeredFields\')), function (key) {\n      return getIn(result, "fields." + key + ".touched");\n    });\n    result = anyTouched ? setIn(result, \'anyTouched\', true) : deleteIn(result, \'anyTouched\');\n    return result;\n  }, _behaviors[FOCUS] = function (state, _ref17) {\n    var field = _ref17.meta.field;\n    var result = state;\n    var previouslyActive = getIn(state, \'active\');\n    result = deleteIn(result, "fields." + previouslyActive + ".active");\n    result = setIn(result, "fields." + field + ".visited", true);\n    result = setIn(result, "fields." + field + ".active", true);\n    result = setIn(result, \'active\', field);\n    return result;\n  }, _behaviors[INITIALIZE] = function (state, _ref18) {\n    var payload = _ref18.payload,\n        _ref18$meta = _ref18.meta,\n        keepDirty = _ref18$meta.keepDirty,\n        keepSubmitSucceeded = _ref18$meta.keepSubmitSucceeded,\n        updateUnregisteredFields = _ref18$meta.updateUnregisteredFields,\n        keepValues = _ref18$meta.keepValues;\n    var mapData = fromJS(payload);\n    var result = empty; // clean all field state\n    // persist old warnings, they will get recalculated if the new form values are different from the old values\n\n    var warning = getIn(state, \'warning\');\n\n    if (warning) {\n      result = setIn(result, \'warning\', warning);\n    }\n\n    var syncWarnings = getIn(state, \'syncWarnings\');\n\n    if (syncWarnings) {\n      result = setIn(result, \'syncWarnings\', syncWarnings);\n    } // persist old errors, they will get recalculated if the new form values are different from the old values\n\n\n    var error = getIn(state, \'error\');\n\n    if (error) {\n      result = setIn(result, \'error\', error);\n    }\n\n    var syncErrors = getIn(state, \'syncErrors\');\n\n    if (syncErrors) {\n      result = setIn(result, \'syncErrors\', syncErrors);\n    }\n\n    var registeredFields = getIn(state, \'registeredFields\');\n\n    if (registeredFields) {\n      result = setIn(result, \'registeredFields\', registeredFields);\n    }\n\n    var previousValues = getIn(state, \'values\');\n    var previousInitialValues = getIn(state, \'initial\');\n    var newInitialValues = mapData;\n    var newValues = previousValues;\n\n    if (keepDirty && registeredFields) {\n      if (!deepEqual(newInitialValues, previousInitialValues)) {\n        //\n        // Keep the value of dirty fields while updating the value of\n        // pristine fields. This way, apps can reinitialize forms while\n        // avoiding stomping on user edits.\n        //\n        // Note 1: The initialize action replaces all initial values\n        // regardless of keepDirty.\n        //\n        // Note 2: When a field is dirty, keepDirty is enabled, and the field\n        // value is the same as the new initial value for the field, the\n        // initialize action causes the field to become pristine. That effect\n        // is what we want.\n        //\n        var overwritePristineValue = function overwritePristineValue(name) {\n          var previousInitialValue = getIn(previousInitialValues, name);\n          var previousValue = getIn(previousValues, name);\n\n          if (deepEqual(previousValue, previousInitialValue)) {\n            // Overwrite the old pristine value with the new pristine value\n            var newInitialValue = getIn(newInitialValues, name); // This check prevents any \'setIn\' call that would create useless\n            // nested objects, since the path to the new field value would\n            // evaluate to the same (especially for undefined values)\n\n            if (getIn(newValues, name) !== newInitialValue) {\n              newValues = setIn(newValues, name, newInitialValue);\n            }\n          }\n        };\n\n        if (!updateUnregisteredFields) {\n          forEach(keys(registeredFields), function (name) {\n            return overwritePristineValue(name);\n          });\n        }\n\n        forEach(keys(newInitialValues), function (name) {\n          var previousInitialValue = getIn(previousInitialValues, name);\n\n          if (typeof previousInitialValue === \'undefined\') {\n            // Add new values at the root level.\n            var newInitialValue = getIn(newInitialValues, name);\n            newValues = setIn(newValues, name, newInitialValue);\n          }\n\n          if (updateUnregisteredFields) {\n            overwritePristineValue(name);\n          }\n        });\n      }\n    } else {\n      newValues = newInitialValues;\n    }\n\n    if (keepValues) {\n      forEach(keys(previousValues), function (name) {\n        var previousValue = getIn(previousValues, name);\n        newValues = setIn(newValues, name, previousValue);\n      });\n      forEach(keys(previousInitialValues), function (name) {\n        var previousInitialValue = getIn(previousInitialValues, name);\n        newInitialValues = setIn(newInitialValues, name, previousInitialValue);\n      });\n    }\n\n    if (keepSubmitSucceeded && getIn(state, \'submitSucceeded\')) {\n      result = setIn(result, \'submitSucceeded\', true);\n    }\n\n    result = setIn(result, \'values\', newValues);\n    result = setIn(result, \'initial\', newInitialValues);\n    return result;\n  }, _behaviors[REGISTER_FIELD] = function (state, _ref19) {\n    var _ref19$payload = _ref19.payload,\n        name = _ref19$payload.name,\n        type = _ref19$payload.type;\n    var key = "registeredFields[\'" + name + "\']";\n    var field = getIn(state, key);\n\n    if (field) {\n      var count = getIn(field, \'count\') + 1;\n      field = setIn(field, \'count\', count);\n    } else {\n      field = fromJS({\n        name: name,\n        type: type,\n        count: 1\n      });\n    }\n\n    return setIn(state, key, field);\n  }, _behaviors[RESET] = function (state) {\n    var result = empty;\n    var registeredFields = getIn(state, \'registeredFields\');\n\n    if (registeredFields) {\n      result = setIn(result, \'registeredFields\', registeredFields);\n    }\n\n    var values = getIn(state, \'initial\');\n\n    if (values) {\n      result = setIn(result, \'values\', values);\n      result = setIn(result, \'initial\', values);\n    }\n\n    return result;\n  }, _behaviors[RESET_SECTION] = function (state, _ref20) {\n    var sections = _ref20.meta.sections;\n    var result = state;\n    sections.forEach(function (section) {\n      result = deleteInWithCleanUp(result, "asyncErrors." + section);\n      result = deleteInWithCleanUp(result, "submitErrors." + section);\n      result = deleteInWithCleanUp(result, "fields." + section);\n      var values = getIn(state, "initial." + section);\n      result = values ? setIn(result, "values." + section, values) : deleteInWithCleanUp(result, "values." + section);\n    });\n    var anyTouched = some(keys(getIn(result, \'registeredFields\')), function (key) {\n      return getIn(result, "fields." + key + ".touched");\n    });\n    result = anyTouched ? setIn(result, \'anyTouched\', true) : deleteIn(result, \'anyTouched\');\n    return result;\n  }, _behaviors[SUBMIT] = function (state) {\n    return setIn(state, \'triggerSubmit\', true);\n  }, _behaviors[START_ASYNC_VALIDATION] = function (state, _ref21) {\n    var field = _ref21.meta.field;\n    return setIn(state, \'asyncValidating\', field || true);\n  }, _behaviors[START_SUBMIT] = function (state) {\n    return setIn(state, \'submitting\', true);\n  }, _behaviors[STOP_ASYNC_VALIDATION] = function (state, _ref22) {\n    var payload = _ref22.payload;\n    var result = state;\n    result = deleteIn(result, \'asyncValidating\');\n\n    if (payload && Object.keys(payload).length) {\n      var _error = payload._error,\n          fieldErrors = objectWithoutPropertiesLoose_default()(payload, ["_error"]);\n\n      if (_error) {\n        result = setIn(result, \'error\', _error);\n      }\n\n      if (Object.keys(fieldErrors).length) {\n        result = setIn(result, \'asyncErrors\', fromJS(fieldErrors));\n      }\n    } else {\n      result = deleteIn(result, \'error\');\n      result = deleteIn(result, \'asyncErrors\');\n    }\n\n    return result;\n  }, _behaviors[STOP_SUBMIT] = function (state, _ref23) {\n    var payload = _ref23.payload;\n    var result = state;\n    result = deleteIn(result, \'submitting\');\n    result = deleteIn(result, \'submitFailed\');\n    result = deleteIn(result, \'submitSucceeded\');\n\n    if (payload && Object.keys(payload).length) {\n      var _error = payload._error,\n          fieldErrors = objectWithoutPropertiesLoose_default()(payload, ["_error"]);\n\n      if (_error) {\n        result = setIn(result, \'error\', _error);\n      } else {\n        result = deleteIn(result, \'error\');\n      }\n\n      if (Object.keys(fieldErrors).length) {\n        result = setIn(result, \'submitErrors\', fromJS(fieldErrors));\n      } else {\n        result = deleteIn(result, \'submitErrors\');\n      }\n\n      result = setIn(result, \'submitFailed\', true);\n    } else {\n      result = deleteIn(result, \'error\');\n      result = deleteIn(result, \'submitErrors\');\n    }\n\n    return result;\n  }, _behaviors[SET_SUBMIT_FAILED] = function (state, _ref24) {\n    var fields = _ref24.meta.fields;\n    var result = state;\n    result = setIn(result, \'submitFailed\', true);\n    result = deleteIn(result, \'submitSucceeded\');\n    result = deleteIn(result, \'submitting\');\n    fields.forEach(function (field) {\n      return result = setIn(result, "fields." + field + ".touched", true);\n    });\n\n    if (fields.length) {\n      result = setIn(result, \'anyTouched\', true);\n    }\n\n    return result;\n  }, _behaviors[SET_SUBMIT_SUCCEEDED] = function (state) {\n    var result = state;\n    result = deleteIn(result, \'submitFailed\');\n    result = setIn(result, \'submitSucceeded\', true);\n    return result;\n  }, _behaviors[TOUCH] = function (state, _ref25) {\n    var fields = _ref25.meta.fields;\n    var result = state;\n    fields.forEach(function (field) {\n      return result = setIn(result, "fields." + field + ".touched", true);\n    });\n    result = setIn(result, \'anyTouched\', true);\n    return result;\n  }, _behaviors[UNREGISTER_FIELD] = function (state, _ref26) {\n    var _ref26$payload = _ref26.payload,\n        name = _ref26$payload.name,\n        destroyOnUnmount = _ref26$payload.destroyOnUnmount;\n    var result = state;\n    var key = "registeredFields[\'" + name + "\']";\n    var field = getIn(result, key);\n\n    if (!field) {\n      return result;\n    }\n\n    var count = getIn(field, \'count\') - 1;\n\n    if (count <= 0 && destroyOnUnmount) {\n      // Note: Cannot use deleteWithCleanUp here because of the flat nature of registeredFields\n      result = deleteIn(result, key);\n\n      if (deepEqual(getIn(result, \'registeredFields\'), empty)) {\n        result = deleteIn(result, \'registeredFields\');\n      }\n\n      var syncErrors = getIn(result, \'syncErrors\');\n\n      if (syncErrors) {\n        syncErrors = plainDeleteInWithCleanUp(syncErrors, name);\n\n        if (plain.deepEqual(syncErrors, plain.empty)) {\n          result = deleteIn(result, \'syncErrors\');\n        } else {\n          result = setIn(result, \'syncErrors\', syncErrors);\n        }\n      }\n\n      var syncWarnings = getIn(result, \'syncWarnings\');\n\n      if (syncWarnings) {\n        syncWarnings = plainDeleteInWithCleanUp(syncWarnings, name);\n\n        if (plain.deepEqual(syncWarnings, plain.empty)) {\n          result = deleteIn(result, \'syncWarnings\');\n        } else {\n          result = setIn(result, \'syncWarnings\', syncWarnings);\n        }\n      }\n\n      result = deleteInWithCleanUp(result, "submitErrors." + name);\n      result = deleteInWithCleanUp(result, "asyncErrors." + name);\n    } else {\n      field = setIn(field, \'count\', count);\n      result = setIn(result, key, field);\n    }\n\n    return result;\n  }, _behaviors[UNTOUCH] = function (state, _ref27) {\n    var fields = _ref27.meta.fields;\n    var result = state;\n    fields.forEach(function (field) {\n      return result = deleteIn(result, "fields." + field + ".touched");\n    });\n    var anyTouched = some(keys(getIn(result, \'registeredFields\')), function (key) {\n      return getIn(result, "fields." + key + ".touched");\n    });\n    result = anyTouched ? setIn(result, \'anyTouched\', true) : deleteIn(result, \'anyTouched\');\n    return result;\n  }, _behaviors[UPDATE_SYNC_ERRORS] = function (state, _ref28) {\n    var _ref28$payload = _ref28.payload,\n        syncErrors = _ref28$payload.syncErrors,\n        error = _ref28$payload.error;\n    var result = state;\n\n    if (error) {\n      result = setIn(result, \'error\', error);\n      result = setIn(result, \'syncError\', true);\n    } else {\n      result = deleteIn(result, \'error\');\n      result = deleteIn(result, \'syncError\');\n    }\n\n    if (Object.keys(syncErrors).length) {\n      result = setIn(result, \'syncErrors\', syncErrors);\n    } else {\n      result = deleteIn(result, \'syncErrors\');\n    }\n\n    return result;\n  }, _behaviors[UPDATE_SYNC_WARNINGS] = function (state, _ref29) {\n    var _ref29$payload = _ref29.payload,\n        syncWarnings = _ref29$payload.syncWarnings,\n        warning = _ref29$payload.warning;\n    var result = state;\n\n    if (warning) {\n      result = setIn(result, \'warning\', warning);\n    } else {\n      result = deleteIn(result, \'warning\');\n    }\n\n    if (Object.keys(syncWarnings).length) {\n      result = setIn(result, \'syncWarnings\', syncWarnings);\n    } else {\n      result = deleteIn(result, \'syncWarnings\');\n    }\n\n    return result;\n  }, _behaviors);\n\n  var reducer = function reducer(state, action) {\n    if (state === void 0) {\n      state = empty;\n    }\n\n    var behavior = behaviors[action.type];\n    return behavior ? behavior(state, action) : state;\n  };\n\n  var byForm = function byForm(reducer) {\n    return function (state, action) {\n      if (state === void 0) {\n        state = empty;\n      }\n\n      if (action === void 0) {\n        action = {\n          type: \'NONE\'\n        };\n      }\n\n      var form = action && action.meta && action.meta.form;\n\n      if (!form || !createReducer_isReduxFormAction(action)) {\n        return state;\n      }\n\n      if (action.type === DESTROY && action.meta && action.meta.form) {\n        return action.meta.form.reduce(function (result, form) {\n          return deleteInWithCleanUp(result, form);\n        }, state);\n      }\n\n      var formState = getIn(state, form);\n      var result = reducer(formState, action);\n      return result === formState ? state : setIn(state, form, result);\n    };\n  };\n  /**\n   * Adds additional functionality to the reducer\n   */\n\n\n  function decorate(target) {\n    target.plugin = function (reducers, config) {\n      var _this = this;\n\n      if (config === void 0) {\n        config = {};\n      }\n\n      // use \'function\' keyword to enable \'this\'\n      return decorate(function (state, action) {\n        if (state === void 0) {\n          state = empty;\n        }\n\n        if (action === void 0) {\n          action = {\n            type: \'NONE\'\n          };\n        }\n\n        var callPlugin = function callPlugin(processed, key) {\n          var previousState = getIn(processed, key);\n          var nextState = reducers[key](previousState, action, getIn(state, key));\n          return nextState !== previousState ? setIn(processed, key, nextState) : processed;\n        };\n\n        var processed = _this(state, action); // run through redux-form reducer\n\n\n        var form = action && action.meta && action.meta.form;\n\n        if (form && !config.receiveAllFormActions) {\n          // this is an action aimed at forms, so only give it to the specified form\'s plugin\n          return reducers[form] ? callPlugin(processed, form) : processed;\n        } else {\n          // this is not a form-specific action, so send it to all the plugins\n          return Object.keys(reducers).reduce(callPlugin, processed);\n        }\n      });\n    };\n\n    return target;\n  }\n\n  return decorate(byForm(reducer));\n}\n\n/* harmony default export */ var es_createReducer = (createReducer);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/reducer.js\n\n\n/* harmony default export */ var es_reducer = (es_createReducer(plain));\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/createClass.js\nvar createClass = __webpack_require__(7);\nvar createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/inheritsLoose.js\nvar inheritsLoose = __webpack_require__(16);\nvar inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash/merge.js\nvar merge = __webpack_require__(102);\nvar merge_default = /*#__PURE__*/__webpack_require__.n(merge);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/lodash/mapValues.js\nvar mapValues = __webpack_require__(103);\nvar mapValues_default = /*#__PURE__*/__webpack_require__.n(mapValues);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js\nvar react_lifecycles_compat_es = __webpack_require__(45);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\nvar hoist_non_react_statics_cjs = __webpack_require__(23);\nvar hoist_non_react_statics_cjs_default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics_cjs);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/invariant/browser.js\nvar browser = __webpack_require__(21);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/is-promise/index.js\nvar is_promise = __webpack_require__(36);\nvar is_promise_default = /*#__PURE__*/__webpack_require__.n(is_promise);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(1);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/utils/PropTypes.js\n\nvar subscriptionShape = prop_types_default.a.shape({\n  trySubscribe: prop_types_default.a.func.isRequired,\n  tryUnsubscribe: prop_types_default.a.func.isRequired,\n  notifyNestedSubs: prop_types_default.a.func.isRequired,\n  isSubscribed: prop_types_default.a.func.isRequired\n});\nvar storeShape = prop_types_default.a.shape({\n  subscribe: prop_types_default.a.func.isRequired,\n  dispatch: prop_types_default.a.func.isRequired,\n  getState: prop_types_default.a.func.isRequired\n});\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/utils/warning.js\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction utils_warning_warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== \'undefined\' && typeof console.error === \'function\') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // "break on all exceptions" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/components/Provider.js\n\n\n\n\n\nvar didWarnAboutReceivingStore = false;\n\nfunction warnAboutReceivingStore() {\n  if (didWarnAboutReceivingStore) {\n    return;\n  }\n\n  didWarnAboutReceivingStore = true;\n  utils_warning_warning(\'<Provider> does not support changing `store` on the fly. \' + \'It is most likely that you see this error because you updated to \' + \'Redux 2.x and React Redux 2.x which no longer hot reload reducers \' + \'automatically. See https://github.com/reduxjs/react-redux/releases/\' + \'tag/v2.0.0 for the migration instructions.\');\n}\n\nfunction createProvider(storeKey) {\n  var _Provider$childContex;\n\n  if (storeKey === void 0) {\n    storeKey = \'store\';\n  }\n\n  var subscriptionKey = storeKey + "Subscription";\n\n  var Provider =\n  /*#__PURE__*/\n  function (_Component) {\n    _inheritsLoose(Provider, _Component);\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;\n    };\n\n    function Provider(props, context) {\n      var _this;\n\n      _this = _Component.call(this, props, context) || this;\n      _this[storeKey] = props.store;\n      return _this;\n    }\n\n    _proto.render = function render() {\n      return react["Children"].only(this.props.children);\n    };\n\n    return Provider;\n  }(react["Component"]);\n\n  if (false) {}\n\n  Provider.propTypes = {\n    store: storeShape.isRequired,\n    children: prop_types_default.a.element.isRequired\n  };\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);\n  return Provider;\n}\n/* harmony default export */ var components_Provider = (createProvider());\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return self;\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/esm/extends.js\nfunction extends_extends() {\n  extends_extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return extends_extends.apply(this, arguments);\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-is/index.js\nvar react_is = __webpack_require__(35);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/utils/Subscription.js\n// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\nvar CLEARED = null;\nvar nullListeners = {\n  notify: function notify() {}\n};\n\nfunction createListenerCollection() {\n  // the current/next pattern is copied from redux\'s createStore code.\n  // TODO: refactor+expose that code to be reusable here?\n  var current = [];\n  var next = [];\n  return {\n    clear: function clear() {\n      next = CLEARED;\n      current = CLEARED;\n    },\n    notify: function notify() {\n      var listeners = current = next;\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i]();\n      }\n    },\n    get: function get() {\n      return next;\n    },\n    subscribe: function subscribe(listener) {\n      var isSubscribed = true;\n      if (next === current) next = current.slice();\n      next.push(listener);\n      return function unsubscribe() {\n        if (!isSubscribed || current === CLEARED) return;\n        isSubscribed = false;\n        if (next === current) next = current.slice();\n        next.splice(next.indexOf(listener), 1);\n      };\n    }\n  };\n}\n\nvar Subscription =\n/*#__PURE__*/\nfunction () {\n  function Subscription(store, parentSub, onStateChange) {\n    this.store = store;\n    this.parentSub = parentSub;\n    this.onStateChange = onStateChange;\n    this.unsubscribe = null;\n    this.listeners = nullListeners;\n  }\n\n  var _proto = Subscription.prototype;\n\n  _proto.addNestedSub = function addNestedSub(listener) {\n    this.trySubscribe();\n    return this.listeners.subscribe(listener);\n  };\n\n  _proto.notifyNestedSubs = function notifyNestedSubs() {\n    this.listeners.notify();\n  };\n\n  _proto.isSubscribed = function isSubscribed() {\n    return Boolean(this.unsubscribe);\n  };\n\n  _proto.trySubscribe = function trySubscribe() {\n    if (!this.unsubscribe) {\n      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);\n      this.listeners = createListenerCollection();\n    }\n  };\n\n  _proto.tryUnsubscribe = function tryUnsubscribe() {\n    if (this.unsubscribe) {\n      this.unsubscribe();\n      this.unsubscribe = null;\n      this.listeners.clear();\n      this.listeners = nullListeners;\n    }\n  };\n\n  return Subscription;\n}();\n\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/components/connectAdvanced.js\n\n\n\n\n\n\n\n\n\n\nvar hotReloadingVersion = 0;\nvar dummyState = {};\n\nfunction noop() {}\n\nfunction makeSelectorStateful(sourceSelector, store) {\n  // wrap the selector in an object that tracks its results between runs.\n  var selector = {\n    run: function runComponentSelector(props) {\n      try {\n        var nextProps = sourceSelector(store.getState(), props);\n\n        if (nextProps !== selector.props || selector.error) {\n          selector.shouldComponentUpdate = true;\n          selector.props = nextProps;\n          selector.error = null;\n        }\n      } catch (error) {\n        selector.shouldComponentUpdate = true;\n        selector.error = error;\n      }\n    }\n  };\n  return selector;\n}\n\nfunction connectAdvanced(\n/*\n  selectorFactory is a func that is responsible for returning the selector function used to\n  compute new props from state, props, and dispatch. For example:\n     export default connectAdvanced((dispatch, options) => (state, props) => ({\n      thing: state.things[props.thingId],\n      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\n    }))(YourComponent)\n   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators\n  outside of their selector as an optimization. Options passed to connectAdvanced are passed to\n  the selectorFactory, along with displayName and WrappedComponent, as the second argument.\n   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound\n  props. Do not use connectAdvanced directly without memoizing results between calls to your\n  selector, otherwise the Connect component will re-render on every state or props change.\n*/\nselectorFactory, // options object:\n_ref) {\n  var _contextTypes, _childContextTypes;\n\n  if (_ref === void 0) {\n    _ref = {};\n  }\n\n  var _ref2 = _ref,\n      _ref2$getDisplayName = _ref2.getDisplayName,\n      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {\n    return "ConnectAdvanced(" + name + ")";\n  } : _ref2$getDisplayName,\n      _ref2$methodName = _ref2.methodName,\n      methodName = _ref2$methodName === void 0 ? \'connectAdvanced\' : _ref2$methodName,\n      _ref2$renderCountProp = _ref2.renderCountProp,\n      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,\n      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,\n      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,\n      _ref2$storeKey = _ref2.storeKey,\n      storeKey = _ref2$storeKey === void 0 ? \'store\' : _ref2$storeKey,\n      _ref2$withRef = _ref2.withRef,\n      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,\n      connectOptions = _objectWithoutPropertiesLoose(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]);\n\n  var subscriptionKey = storeKey + \'Subscription\';\n  var version = hotReloadingVersion++;\n  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);\n  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);\n  return function wrapWithConnect(WrappedComponent) {\n    browser_default()(Object(react_is["isValidElementType"])(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + JSON.stringify(WrappedComponent)));\n    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \'Component\';\n    var displayName = getDisplayName(wrappedComponentName);\n\n    var selectorFactoryOptions = extends_extends({}, connectOptions, {\n      getDisplayName: getDisplayName,\n      methodName: methodName,\n      renderCountProp: renderCountProp,\n      shouldHandleStateChanges: shouldHandleStateChanges,\n      storeKey: storeKey,\n      withRef: withRef,\n      displayName: displayName,\n      wrappedComponentName: wrappedComponentName,\n      WrappedComponent: WrappedComponent // TODO Actually fix our use of componentWillReceiveProps\n\n      /* eslint-disable react/no-deprecated */\n\n    });\n\n    var Connect =\n    /*#__PURE__*/\n    function (_Component) {\n      _inheritsLoose(Connect, _Component);\n\n      function Connect(props, context) {\n        var _this;\n\n        _this = _Component.call(this, props, context) || this;\n        _this.version = version;\n        _this.state = {};\n        _this.renderCount = 0;\n        _this.store = props[storeKey] || context[storeKey];\n        _this.propsMode = Boolean(props[storeKey]);\n        _this.setWrappedInstance = _this.setWrappedInstance.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n        browser_default()(_this.store, "Could not find \\"" + storeKey + "\\" in either the context or props of " + ("\\"" + displayName + "\\". Either wrap the root component in a <Provider>, ") + ("or explicitly pass \\"" + storeKey + "\\" as a prop to \\"" + displayName + "\\"."));\n\n        _this.initSelector();\n\n        _this.initSubscription();\n\n        return _this;\n      }\n\n      var _proto = Connect.prototype;\n\n      _proto.getChildContext = function getChildContext() {\n        var _ref3;\n\n        // If this component received store from props, its subscription should be transparent\n        // to any descendants receiving store+subscription from context; it passes along\n        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows\n        // Connect to control ordering of notifications to flow top-down.\n        var subscription = this.propsMode ? null : this.subscription;\n        return _ref3 = {}, _ref3[subscriptionKey] = subscription || this.context[subscriptionKey], _ref3;\n      };\n\n      _proto.componentDidMount = function componentDidMount() {\n        if (!shouldHandleStateChanges) return; // componentWillMount fires during server side rendering, but componentDidMount and\n        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.\n        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.\n        // To handle the case where a child component may have triggered a state change by\n        // dispatching an action in its componentWillMount, we have to re-run the select and maybe\n        // re-render.\n\n        this.subscription.trySubscribe();\n        this.selector.run(this.props);\n        if (this.selector.shouldComponentUpdate) this.forceUpdate();\n      };\n\n      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n        this.selector.run(nextProps);\n      };\n\n      _proto.shouldComponentUpdate = function shouldComponentUpdate() {\n        return this.selector.shouldComponentUpdate;\n      };\n\n      _proto.componentWillUnmount = function componentWillUnmount() {\n        if (this.subscription) this.subscription.tryUnsubscribe();\n        this.subscription = null;\n        this.notifyNestedSubs = noop;\n        this.store = null;\n        this.selector.run = noop;\n        this.selector.shouldComponentUpdate = false;\n      };\n\n      _proto.getWrappedInstance = function getWrappedInstance() {\n        browser_default()(withRef, "To access the wrapped instance, you need to specify " + ("{ withRef: true } in the options argument of the " + methodName + "() call."));\n        return this.wrappedInstance;\n      };\n\n      _proto.setWrappedInstance = function setWrappedInstance(ref) {\n        this.wrappedInstance = ref;\n      };\n\n      _proto.initSelector = function initSelector() {\n        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);\n        this.selector = makeSelectorStateful(sourceSelector, this.store);\n        this.selector.run(this.props);\n      };\n\n      _proto.initSubscription = function initSubscription() {\n        if (!shouldHandleStateChanges) return; // parentSub\'s source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn\'t use subscription from context, or vice versa.\n\n        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];\n        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this)); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `this.subscription` will then be null. An\n        // extra null check every change can be avoided by copying the method onto `this` and then\n        // replacing it with a no-op on unmount. This can probably be avoided if Subscription\'s\n        // listeners logic is changed to not call listeners that have been unsubscribed in the\n        // middle of the notification loop.\n\n        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);\n      };\n\n      _proto.onStateChange = function onStateChange() {\n        this.selector.run(this.props);\n\n        if (!this.selector.shouldComponentUpdate) {\n          this.notifyNestedSubs();\n        } else {\n          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;\n          this.setState(dummyState);\n        }\n      };\n\n      _proto.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {\n        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it\n        // needs to notify nested subs. Once called, it unimplements itself until further state\n        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does\n        // a boolean check every time avoids an extra method call most of the time, resulting\n        // in some perf boost.\n        this.componentDidUpdate = undefined;\n        this.notifyNestedSubs();\n      };\n\n      _proto.isSubscribed = function isSubscribed() {\n        return Boolean(this.subscription) && this.subscription.isSubscribed();\n      };\n\n      _proto.addExtraProps = function addExtraProps(props) {\n        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props; // make a shallow copy so that fields added don\'t leak to the original selector.\n        // this is especially important for \'ref\' since that\'s a reference back to the component\n        // instance. a singleton memoized selector would then be holding a reference to the\n        // instance, preventing the instance from being garbage collected, and that would be bad\n\n        var withExtras = extends_extends({}, props);\n\n        if (withRef) withExtras.ref = this.setWrappedInstance;\n        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;\n        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;\n        return withExtras;\n      };\n\n      _proto.render = function render() {\n        var selector = this.selector;\n        selector.shouldComponentUpdate = false;\n\n        if (selector.error) {\n          throw selector.error;\n        } else {\n          return Object(react["createElement"])(WrappedComponent, this.addExtraProps(selector.props));\n        }\n      };\n\n      return Connect;\n    }(react["Component"]);\n    /* eslint-enable react/no-deprecated */\n\n\n    Connect.WrappedComponent = WrappedComponent;\n    Connect.displayName = displayName;\n    Connect.childContextTypes = childContextTypes;\n    Connect.contextTypes = contextTypes;\n    Connect.propTypes = contextTypes;\n\n    if (false) {}\n\n    return hoist_non_react_statics_cjs_default()(Connect, WrappedComponent);\n  };\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/utils/shallowEqual.js\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction shallowEqual_is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction shallowEqual(objA, objB) {\n  if (shallowEqual_is(objA, objB)) return true;\n\n  if (typeof objA !== \'object\' || objA === null || typeof objB !== \'object\' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwn.call(objB, keysA[i]) || !shallowEqual_is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/utils/isPlainObject.js\n/**\r\n * @param {any} obj The object to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\nfunction isPlainObject_isPlainObject(obj) {\n  if (typeof obj !== \'object\' || obj === null) return false;\n  var proto = Object.getPrototypeOf(obj);\n  if (proto === null) return true;\n  var baseProto = proto;\n\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto);\n  }\n\n  return proto === baseProto;\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/utils/verifyPlainObject.js\n\n\nfunction verifyPlainObject(value, displayName, methodName) {\n  if (!isPlainObject_isPlainObject(value)) {\n    utils_warning_warning(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");\n  }\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/wrapMapToProps.js\n\nfunction wrapMapToPropsConstant(getConstant) {\n  return function initConstantSelector(dispatch, options) {\n    var constant = getConstant(dispatch, options);\n\n    function constantSelector() {\n      return constant;\n    }\n\n    constantSelector.dependsOnOwnProps = false;\n    return constantSelector;\n  };\n} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n// \n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\n\nfunction getDependsOnOwnProps(mapToProps) {\n  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n// \n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//    \n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//    \n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//    \n\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n  return function initProxySelector(dispatch, _ref) {\n    var displayName = _ref.displayName;\n\n    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);\n    }; // allow detectFactoryAndVerify to get ownProps\n\n\n    proxy.dependsOnOwnProps = true;\n\n    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n      proxy.mapToProps = mapToProps;\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n      var props = proxy(stateOrDispatch, ownProps);\n\n      if (typeof props === \'function\') {\n        proxy.mapToProps = props;\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n        props = proxy(stateOrDispatch, ownProps);\n      }\n\n      if (false) {}\n      return props;\n    };\n\n    return proxy;\n  };\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/mapDispatchToProps.js\n\n\nfunction whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n  return typeof mapDispatchToProps === \'function\' ? wrapMapToPropsFunc(mapDispatchToProps, \'mapDispatchToProps\') : undefined;\n}\nfunction whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {\n    return {\n      dispatch: dispatch\n    };\n  }) : undefined;\n}\nfunction whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n  return mapDispatchToProps && typeof mapDispatchToProps === \'object\' ? wrapMapToPropsConstant(function (dispatch) {\n    return bindActionCreators(mapDispatchToProps, dispatch);\n  }) : undefined;\n}\n/* harmony default export */ var connect_mapDispatchToProps = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/mapStateToProps.js\n\nfunction whenMapStateToPropsIsFunction(mapStateToProps) {\n  return typeof mapStateToProps === \'function\' ? wrapMapToPropsFunc(mapStateToProps, \'mapStateToProps\') : undefined;\n}\nfunction whenMapStateToPropsIsMissing(mapStateToProps) {\n  return !mapStateToProps ? wrapMapToPropsConstant(function () {\n    return {};\n  }) : undefined;\n}\n/* harmony default export */ var connect_mapStateToProps = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/mergeProps.js\n\n\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n  return extends_extends({}, ownProps, stateProps, dispatchProps);\n}\nfunction wrapMergePropsFunc(mergeProps) {\n  return function initMergePropsProxy(dispatch, _ref) {\n    var displayName = _ref.displayName,\n        pure = _ref.pure,\n        areMergedPropsEqual = _ref.areMergedPropsEqual;\n    var hasRunOnce = false;\n    var mergedProps;\n    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n\n      if (hasRunOnce) {\n        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n      } else {\n        hasRunOnce = true;\n        mergedProps = nextMergedProps;\n        if (false) {}\n      }\n\n      return mergedProps;\n    };\n  };\n}\nfunction whenMergePropsIsFunction(mergeProps) {\n  return typeof mergeProps === \'function\' ? wrapMergePropsFunc(mergeProps) : undefined;\n}\nfunction whenMergePropsIsOmitted(mergeProps) {\n  return !mergeProps ? function () {\n    return defaultMergeProps;\n  } : undefined;\n}\n/* harmony default export */ var connect_mergeProps = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/verifySubselectors.js\n\n\nfunction verify(selector, methodName, displayName) {\n  if (!selector) {\n    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");\n  } else if (methodName === \'mapStateToProps\' || methodName === \'mapDispatchToProps\') {\n    if (!selector.hasOwnProperty(\'dependsOnOwnProps\')) {\n      utils_warning_warning("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");\n    }\n  }\n}\n\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {\n  verify(mapStateToProps, \'mapStateToProps\', displayName);\n  verify(mapDispatchToProps, \'mapDispatchToProps\', displayName);\n  verify(mergeProps, \'mergeProps\', displayName);\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/selectorFactory.js\n\n\nfunction impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\n  return function impureFinalPropsSelector(state, ownProps) {\n    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\n  };\n}\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n  var areStatesEqual = _ref.areStatesEqual,\n      areOwnPropsEqual = _ref.areOwnPropsEqual,\n      areStatePropsEqual = _ref.areStatePropsEqual;\n  var hasRunAtLeastOnce = false;\n  var state;\n  var ownProps;\n  var stateProps;\n  var dispatchProps;\n  var mergedProps;\n\n  function handleFirstCall(firstState, firstOwnProps) {\n    state = firstState;\n    ownProps = firstOwnProps;\n    stateProps = mapStateToProps(state, ownProps);\n    dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    hasRunAtLeastOnce = true;\n    return mergedProps;\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleNewState() {\n    var nextStateProps = mapStateToProps(state, ownProps);\n    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n    stateProps = nextStateProps;\n    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n    return mergedProps;\n  }\n\n  function handleSubsequentCalls(nextState, nextOwnProps) {\n    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n    var stateChanged = !areStatesEqual(nextState, state);\n    state = nextState;\n    ownProps = nextOwnProps;\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n    if (propsChanged) return handleNewProps();\n    if (stateChanged) return handleNewState();\n    return mergedProps;\n  }\n\n  return function pureFinalPropsSelector(nextState, nextOwnProps) {\n    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n  };\n} // TODO: Add more comments\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced\'s shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\n\nfunction finalPropsSelectorFactory(dispatch, _ref2) {\n  var initMapStateToProps = _ref2.initMapStateToProps,\n      initMapDispatchToProps = _ref2.initMapDispatchToProps,\n      initMergeProps = _ref2.initMergeProps,\n      options = _objectWithoutPropertiesLoose(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);\n\n  var mapStateToProps = initMapStateToProps(dispatch, options);\n  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n  var mergeProps = initMergeProps(dispatch, options);\n\n  if (false) {}\n\n  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\n  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/connect/connect.js\n\n\n\n\n\n\n\n\n/*\n  connect is a facade over connectAdvanced. It turns its args into a compatible\n  selectorFactory, which has the signature:\n\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\n  \n  connect passes its args to connectAdvanced as options, which will in turn pass them to\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\n\n  selectorFactory returns a final props selector from its mapStateToProps,\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\n  mergePropsFactories, and pure args.\n\n  The resulting final props selector is called by the Connect component instance whenever\n  it receives new props or store state.\n */\n\nfunction match(arg, factories, name) {\n  for (var i = factories.length - 1; i >= 0; i--) {\n    var result = factories[i](arg);\n    if (result) return result;\n  }\n\n  return function (dispatch, options) {\n    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");\n  };\n}\n\nfunction strictEqual(a, b) {\n  return a === b;\n} // createConnect with default args builds the \'official\' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\n\n\nfunction createConnect(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$connectHOC = _ref.connectHOC,\n      connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC,\n      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,\n      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? connect_mapStateToProps : _ref$mapStateToPropsF,\n      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,\n      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? connect_mapDispatchToProps : _ref$mapDispatchToPro,\n      _ref$mergePropsFactor = _ref.mergePropsFactories,\n      mergePropsFactories = _ref$mergePropsFactor === void 0 ? connect_mergeProps : _ref$mergePropsFactor,\n      _ref$selectorFactory = _ref.selectorFactory,\n      selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;\n\n  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {\n    if (_ref2 === void 0) {\n      _ref2 = {};\n    }\n\n    var _ref3 = _ref2,\n        _ref3$pure = _ref3.pure,\n        pure = _ref3$pure === void 0 ? true : _ref3$pure,\n        _ref3$areStatesEqual = _ref3.areStatesEqual,\n        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,\n        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,\n        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua,\n        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,\n        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq,\n        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,\n        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE,\n        extraOptions = _objectWithoutPropertiesLoose(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);\n\n    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, \'mapStateToProps\');\n    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, \'mapDispatchToProps\');\n    var initMergeProps = match(mergeProps, mergePropsFactories, \'mergeProps\');\n    return connectHOC(selectorFactory, extends_extends({\n      // used in error messages\n      methodName: \'connect\',\n      // used to compute Connect\'s displayName from the wrapped component\'s displayName.\n      getDisplayName: function getDisplayName(name) {\n        return "Connect(" + name + ")";\n      },\n      // if mapStateToProps is falsy, the Connect component doesn\'t subscribe to store state changes\n      shouldHandleStateChanges: Boolean(mapStateToProps),\n      // passed through to selectorFactory\n      initMapStateToProps: initMapStateToProps,\n      initMapDispatchToProps: initMapDispatchToProps,\n      initMergeProps: initMergeProps,\n      pure: pure,\n      areStatesEqual: areStatesEqual,\n      areOwnPropsEqual: areOwnPropsEqual,\n      areStatePropsEqual: areStatePropsEqual,\n      areMergedPropsEqual: areMergedPropsEqual\n    }, extraOptions));\n  };\n}\n/* harmony default export */ var connect_connect = (createConnect());\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/react-redux/es/index.js\n\n\n\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/actions.js\n\n\n\nvar actions_arrayInsert = function arrayInsert(form, field, index, value) {\n  return {\n    type: ARRAY_INSERT,\n    meta: {\n      form: form,\n      field: field,\n      index: index\n    },\n    payload: value\n  };\n};\n\nvar actions_arrayMove = function arrayMove(form, field, from, to) {\n  return {\n    type: ARRAY_MOVE,\n    meta: {\n      form: form,\n      field: field,\n      from: from,\n      to: to\n    }\n  };\n};\n\nvar actions_arrayPop = function arrayPop(form, field) {\n  return {\n    type: ARRAY_POP,\n    meta: {\n      form: form,\n      field: field\n    }\n  };\n};\n\nvar actions_arrayPush = function arrayPush(form, field, value) {\n  return {\n    type: ARRAY_PUSH,\n    meta: {\n      form: form,\n      field: field\n    },\n    payload: value\n  };\n};\n\nvar actions_arrayRemove = function arrayRemove(form, field, index) {\n  return {\n    type: ARRAY_REMOVE,\n    meta: {\n      form: form,\n      field: field,\n      index: index\n    }\n  };\n};\n\nvar actions_arrayRemoveAll = function arrayRemoveAll(form, field) {\n  return {\n    type: ARRAY_REMOVE_ALL,\n    meta: {\n      form: form,\n      field: field\n    }\n  };\n};\n\nvar actions_arrayShift = function arrayShift(form, field) {\n  return {\n    type: ARRAY_SHIFT,\n    meta: {\n      form: form,\n      field: field\n    }\n  };\n};\n\nvar actions_arraySplice = function arraySplice(form, field, index, removeNum, value) {\n  var action = {\n    type: ARRAY_SPLICE,\n    meta: {\n      form: form,\n      field: field,\n      index: index,\n      removeNum: removeNum\n    }\n  };\n\n  if (value !== undefined) {\n    action.payload = value;\n  }\n\n  return action;\n};\n\nvar actions_arraySwap = function arraySwap(form, field, indexA, indexB) {\n  if (indexA === indexB) {\n    throw new Error(\'Swap indices cannot be equal\');\n  }\n\n  if (indexA < 0 || indexB < 0) {\n    throw new Error(\'Swap indices cannot be negative\');\n  }\n\n  return {\n    type: ARRAY_SWAP,\n    meta: {\n      form: form,\n      field: field,\n      indexA: indexA,\n      indexB: indexB\n    }\n  };\n};\n\nvar actions_arrayUnshift = function arrayUnshift(form, field, value) {\n  return {\n    type: ARRAY_UNSHIFT,\n    meta: {\n      form: form,\n      field: field\n    },\n    payload: value\n  };\n};\n\nvar actions_autofill = function autofill(form, field, value) {\n  return {\n    type: AUTOFILL,\n    meta: {\n      form: form,\n      field: field\n    },\n    payload: value\n  };\n};\n\nvar actions_blur = function blur(form, field, value, touch) {\n  return {\n    type: BLUR,\n    meta: {\n      form: form,\n      field: field,\n      touch: touch\n    },\n    payload: value\n  };\n};\n\nvar actions_change = function change(form, field, value, touch, persistentSubmitErrors) {\n  return {\n    type: CHANGE,\n    meta: {\n      form: form,\n      field: field,\n      touch: touch,\n      persistentSubmitErrors: persistentSubmitErrors\n    },\n    payload: value\n  };\n};\n\nvar actions_clearSubmit = function clearSubmit(form) {\n  return {\n    type: CLEAR_SUBMIT,\n    meta: {\n      form: form\n    }\n  };\n};\n\nvar actions_clearSubmitErrors = function clearSubmitErrors(form) {\n  return {\n    type: CLEAR_SUBMIT_ERRORS,\n    meta: {\n      form: form\n    }\n  };\n};\n\nvar actions_clearAsyncError = function clearAsyncError(form, field) {\n  return {\n    type: CLEAR_ASYNC_ERROR,\n    meta: {\n      form: form,\n      field: field\n    }\n  };\n};\n\nvar actions_clearFields = function clearFields(form, keepTouched, persistentSubmitErrors) {\n  for (var _len = arguments.length, fields = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    fields[_key - 3] = arguments[_key];\n  }\n\n  return {\n    type: CLEAR_FIELDS,\n    meta: {\n      form: form,\n      keepTouched: keepTouched,\n      persistentSubmitErrors: persistentSubmitErrors,\n      fields: fields\n    }\n  };\n};\n\nvar actions_destroy = function destroy() {\n  for (var _len2 = arguments.length, form = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    form[_key2] = arguments[_key2];\n  }\n\n  return {\n    type: DESTROY,\n    meta: {\n      form: form\n    }\n  };\n};\n\nvar actions_focus = function focus(form, field) {\n  return {\n    type: FOCUS,\n    meta: {\n      form: form,\n      field: field\n    }\n  };\n};\n\nvar actions_initialize = function initialize(form, values, keepDirty, otherMeta) {\n  if (otherMeta === void 0) {\n    otherMeta = {};\n  }\n\n  if (keepDirty instanceof Object) {\n    otherMeta = keepDirty;\n    keepDirty = false;\n  }\n\n  return {\n    type: INITIALIZE,\n    meta: extends_default()({\n      form: form,\n      keepDirty: keepDirty\n    }, otherMeta),\n    payload: values\n  };\n};\n\nvar actions_registerField = function registerField(form, name, type) {\n  return {\n    type: REGISTER_FIELD,\n    meta: {\n      form: form\n    },\n    payload: {\n      name: name,\n      type: type\n    }\n  };\n};\n\nvar actions_reset = function reset(form) {\n  return {\n    type: RESET,\n    meta: {\n      form: form\n    }\n  };\n};\n\nvar actions_resetSection = function resetSection(form) {\n  for (var _len3 = arguments.length, sections = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    sections[_key3 - 1] = arguments[_key3];\n  }\n\n  return {\n    type: RESET_SECTION,\n    meta: {\n      form: form,\n      sections: sections\n    }\n  };\n};\n\nvar actions_startAsyncValidation = function startAsyncValidation(form, field) {\n  return {\n    type: START_ASYNC_VALIDATION,\n    meta: {\n      form: form,\n      field: field\n    }\n  };\n};\n\nvar actions_startSubmit = function startSubmit(form) {\n  return {\n    type: START_SUBMIT,\n    meta: {\n      form: form\n    }\n  };\n};\n\nvar actions_stopAsyncValidation = function stopAsyncValidation(form, errors) {\n  return {\n    type: STOP_ASYNC_VALIDATION,\n    meta: {\n      form: form\n    },\n    payload: errors,\n    error: !!(errors && Object.keys(errors).length)\n  };\n};\n\nvar actions_stopSubmit = function stopSubmit(form, errors) {\n  return {\n    type: STOP_SUBMIT,\n    meta: {\n      form: form\n    },\n    payload: errors,\n    error: !!(errors && Object.keys(errors).length)\n  };\n};\n\nvar actions_submit = function submit(form) {\n  return {\n    type: SUBMIT,\n    meta: {\n      form: form\n    }\n  };\n};\n\nvar actions_setSubmitFailed = function setSubmitFailed(form) {\n  for (var _len4 = arguments.length, fields = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    fields[_key4 - 1] = arguments[_key4];\n  }\n\n  return {\n    type: SET_SUBMIT_FAILED,\n    meta: {\n      form: form,\n      fields: fields\n    },\n    error: true\n  };\n};\n\nvar actions_setSubmitSucceeded = function setSubmitSucceeded(form) {\n  for (var _len5 = arguments.length, fields = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    fields[_key5 - 1] = arguments[_key5];\n  }\n\n  return {\n    type: SET_SUBMIT_SUCCEEDED,\n    meta: {\n      form: form,\n      fields: fields\n    },\n    error: false\n  };\n};\n\nvar actions_touch = function touch(form) {\n  for (var _len6 = arguments.length, fields = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    fields[_key6 - 1] = arguments[_key6];\n  }\n\n  return {\n    type: TOUCH,\n    meta: {\n      form: form,\n      fields: fields\n    }\n  };\n};\n\nvar actions_unregisterField = function unregisterField(form, name, destroyOnUnmount) {\n  if (destroyOnUnmount === void 0) {\n    destroyOnUnmount = true;\n  }\n\n  return {\n    type: UNREGISTER_FIELD,\n    meta: {\n      form: form\n    },\n    payload: {\n      name: name,\n      destroyOnUnmount: destroyOnUnmount\n    }\n  };\n};\n\nvar actions_untouch = function untouch(form) {\n  for (var _len7 = arguments.length, fields = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    fields[_key7 - 1] = arguments[_key7];\n  }\n\n  return {\n    type: UNTOUCH,\n    meta: {\n      form: form,\n      fields: fields\n    }\n  };\n};\n\nvar actions_updateSyncErrors = function updateSyncErrors(form, syncErrors, error) {\n  if (syncErrors === void 0) {\n    syncErrors = {};\n  }\n\n  return {\n    type: UPDATE_SYNC_ERRORS,\n    meta: {\n      form: form\n    },\n    payload: {\n      syncErrors: syncErrors,\n      error: error\n    }\n  };\n};\n\nvar actions_updateSyncWarnings = function updateSyncWarnings(form, syncWarnings, warning) {\n  if (syncWarnings === void 0) {\n    syncWarnings = {};\n  }\n\n  return {\n    type: UPDATE_SYNC_WARNINGS,\n    meta: {\n      form: form\n    },\n    payload: {\n      syncWarnings: syncWarnings,\n      warning: warning\n    }\n  };\n};\n\nvar actions = {\n  arrayInsert: actions_arrayInsert,\n  arrayMove: actions_arrayMove,\n  arrayPop: actions_arrayPop,\n  arrayPush: actions_arrayPush,\n  arrayRemove: actions_arrayRemove,\n  arrayRemoveAll: actions_arrayRemoveAll,\n  arrayShift: actions_arrayShift,\n  arraySplice: actions_arraySplice,\n  arraySwap: actions_arraySwap,\n  arrayUnshift: actions_arrayUnshift,\n  autofill: actions_autofill,\n  blur: actions_blur,\n  change: actions_change,\n  clearFields: actions_clearFields,\n  clearSubmit: actions_clearSubmit,\n  clearSubmitErrors: actions_clearSubmitErrors,\n  clearAsyncError: actions_clearAsyncError,\n  destroy: actions_destroy,\n  focus: actions_focus,\n  initialize: actions_initialize,\n  registerField: actions_registerField,\n  reset: actions_reset,\n  resetSection: actions_resetSection,\n  startAsyncValidation: actions_startAsyncValidation,\n  startSubmit: actions_startSubmit,\n  stopAsyncValidation: actions_stopAsyncValidation,\n  stopSubmit: actions_stopSubmit,\n  submit: actions_submit,\n  setSubmitFailed: actions_setSubmitFailed,\n  setSubmitSucceeded: actions_setSubmitSucceeded,\n  touch: actions_touch,\n  unregisterField: actions_unregisterField,\n  untouch: actions_untouch,\n  updateSyncErrors: actions_updateSyncErrors,\n  updateSyncWarnings: actions_updateSyncWarnings\n};\n/* harmony default export */ var es_actions = (actions);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/asyncValidation.js\n\n\nvar asyncValidation_asyncValidation = function asyncValidation(fn, start, stop, field) {\n  start(field);\n  var promise = fn();\n\n  if (!is_promise_default()(promise)) {\n    throw new Error(\'asyncValidate function passed to reduxForm must return a promise\');\n  }\n\n  var handleErrors = function handleErrors(rejected) {\n    return function (errors) {\n      if (rejected) {\n        if (errors && Object.keys(errors).length) {\n          stop(errors);\n          return errors;\n        } else {\n          stop();\n          throw new Error(\'Asynchronous validation promise was rejected without errors.\');\n        }\n      }\n\n      stop();\n      return Promise.resolve();\n    };\n  };\n\n  return promise.then(handleErrors(false), handleErrors(true));\n};\n\n/* harmony default export */ var es_asyncValidation = (asyncValidation_asyncValidation);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/defaultShouldAsyncValidate.js\nvar defaultShouldAsyncValidate = function defaultShouldAsyncValidate(_ref) {\n  var initialized = _ref.initialized,\n      trigger = _ref.trigger,\n      pristine = _ref.pristine,\n      syncValidationPasses = _ref.syncValidationPasses;\n\n  if (!syncValidationPasses) {\n    return false;\n  }\n\n  switch (trigger) {\n    case \'blur\':\n    case \'change\':\n      // blurring\n      return true;\n\n    case \'submit\':\n      // submitting, so only async validate if form is dirty or was never initialized\n      // conversely, DON\'T async validate if the form is pristine just as it was initialized\n      return !pristine || !initialized;\n\n    default:\n      return false;\n  }\n};\n\n/* harmony default export */ var es_defaultShouldAsyncValidate = (defaultShouldAsyncValidate);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/defaultShouldValidate.js\nvar defaultShouldValidate = function defaultShouldValidate(_ref) {\n  var values = _ref.values,\n      nextProps = _ref.nextProps,\n      initialRender = _ref.initialRender,\n      lastFieldValidatorKeys = _ref.lastFieldValidatorKeys,\n      fieldValidatorKeys = _ref.fieldValidatorKeys,\n      structure = _ref.structure;\n\n  if (initialRender) {\n    return true;\n  }\n\n  return !structure.deepEqual(values, nextProps && nextProps.values) || !structure.deepEqual(lastFieldValidatorKeys, fieldValidatorKeys);\n};\n\n/* harmony default export */ var es_defaultShouldValidate = (defaultShouldValidate);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/defaultShouldError.js\nvar defaultShouldError = function defaultShouldError(_ref) {\n  var values = _ref.values,\n      nextProps = _ref.nextProps,\n      initialRender = _ref.initialRender,\n      lastFieldValidatorKeys = _ref.lastFieldValidatorKeys,\n      fieldValidatorKeys = _ref.fieldValidatorKeys,\n      structure = _ref.structure;\n\n  if (initialRender) {\n    return true;\n  }\n\n  return !structure.deepEqual(values, nextProps && nextProps.values) || !structure.deepEqual(lastFieldValidatorKeys, fieldValidatorKeys);\n};\n\n/* harmony default export */ var es_defaultShouldError = (defaultShouldError);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/defaultShouldWarn.js\nvar defaultShouldWarn = function defaultShouldWarn(_ref) {\n  var values = _ref.values,\n      nextProps = _ref.nextProps,\n      initialRender = _ref.initialRender,\n      lastFieldValidatorKeys = _ref.lastFieldValidatorKeys,\n      fieldValidatorKeys = _ref.fieldValidatorKeys,\n      structure = _ref.structure;\n\n  if (initialRender) {\n    return true;\n  }\n\n  return !structure.deepEqual(values, nextProps && nextProps.values) || !structure.deepEqual(lastFieldValidatorKeys, fieldValidatorKeys);\n};\n\n/* harmony default export */ var es_defaultShouldWarn = (defaultShouldWarn);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/events/isEvent.js\nvar isEvent = function isEvent(candidate) {\n  return !!(candidate && candidate.stopPropagation && candidate.preventDefault);\n};\n\n/* harmony default export */ var events_isEvent = (isEvent);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/events/silenceEvent.js\n\n\nvar silenceEvent_silenceEvent = function silenceEvent(event) {\n  var is = events_isEvent(event);\n\n  if (is) {\n    event.preventDefault();\n  }\n\n  return is;\n};\n\n/* harmony default export */ var events_silenceEvent = (silenceEvent_silenceEvent);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/events/silenceEvents.js\n\n\nvar silenceEvents_silenceEvents = function silenceEvents(fn) {\n  return function (event) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return events_silenceEvent(event) ? fn.apply(void 0, args) : fn.apply(void 0, [event].concat(args));\n  };\n};\n\n/* harmony default export */ var events_silenceEvents = (silenceEvents_silenceEvents);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/generateValidator.js\n\n\nvar toArray = function toArray(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nvar getError = function getError(value, values, props, validators, name) {\n  var array = toArray(validators);\n\n  for (var i = 0; i < array.length; i++) {\n    var error = array[i](value, values, props, name);\n\n    if (error) {\n      return error;\n    }\n  }\n};\n\nvar generateValidator_generateValidator = function generateValidator(validators, _ref) {\n  var getIn = _ref.getIn;\n  return function (values, props) {\n    var errors = {};\n    Object.keys(validators).forEach(function (name) {\n      var value = getIn(values, name);\n      var error = getError(value, values, props, validators[name], name);\n\n      if (error) {\n        errors = plain.setIn(errors, name, error);\n      }\n    });\n    return errors;\n  };\n};\n\n/* harmony default export */ var es_generateValidator = (generateValidator_generateValidator);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/es6-error/es6/index.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    cls.apply(this, arguments);\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nvar ExtendableError = function (_extendableBuiltin2) {\n  _inherits(ExtendableError, _extendableBuiltin2);\n\n  function ExtendableError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'\';\n\n    _classCallCheck(this, ExtendableError);\n\n    // extending Error is weird and does not propagate `message`\n    var _this = _possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));\n\n    Object.defineProperty(_this, \'message\', {\n      configurable: true,\n      enumerable: false,\n      value: message,\n      writable: true\n    });\n\n    Object.defineProperty(_this, \'name\', {\n      configurable: true,\n      enumerable: false,\n      value: _this.constructor.name,\n      writable: true\n    });\n\n    if (Error.hasOwnProperty(\'captureStackTrace\')) {\n      Error.captureStackTrace(_this, _this.constructor);\n      return _possibleConstructorReturn(_this);\n    }\n\n    Object.defineProperty(_this, \'stack\', {\n      configurable: true,\n      enumerable: false,\n      value: new Error(message).stack,\n      writable: true\n    });\n    return _this;\n  }\n\n  return ExtendableError;\n}(_extendableBuiltin(Error));\n\n/* harmony default export */ var es6 = (ExtendableError);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/SubmissionError.js\n\n\n\nvar SubmissionError_SubmissionError =\n/*#__PURE__*/\nfunction (_ExtendableError) {\n  inheritsLoose_default()(SubmissionError, _ExtendableError);\n\n  function SubmissionError(errors) {\n    var _this;\n\n    _this = _ExtendableError.call(this, \'Submit Validation Failed\') || this;\n    _this.errors = errors;\n    return _this;\n  }\n\n  return SubmissionError;\n}(es6);\n\n/* harmony default export */ var es_SubmissionError = (SubmissionError_SubmissionError);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/handleSubmit.js\n\n\n\n\nvar handleSubmit_isSubmissionError = function isSubmissionError(error) {\n  return error && error.name === es_SubmissionError.name;\n};\n\nvar handleSubmit_mergeErrors = function mergeErrors(_ref) {\n  var asyncErrors = _ref.asyncErrors,\n      syncErrors = _ref.syncErrors;\n  return asyncErrors && typeof asyncErrors.merge === \'function\' ? asyncErrors.merge(syncErrors).toJS() : extends_default()({}, asyncErrors, syncErrors);\n};\n\nvar handleSubmit_handleSubmit = function handleSubmit(submit, props, valid, asyncValidate, fields) {\n  var dispatch = props.dispatch,\n      onSubmitFail = props.onSubmitFail,\n      onSubmitSuccess = props.onSubmitSuccess,\n      startSubmit = props.startSubmit,\n      stopSubmit = props.stopSubmit,\n      setSubmitFailed = props.setSubmitFailed,\n      setSubmitSucceeded = props.setSubmitSucceeded,\n      syncErrors = props.syncErrors,\n      asyncErrors = props.asyncErrors,\n      touch = props.touch,\n      values = props.values,\n      persistentSubmitErrors = props.persistentSubmitErrors;\n  touch.apply(void 0, Array.from(fields)); // mark all fields as touched\n\n  if (valid || persistentSubmitErrors) {\n    var doSubmit = function doSubmit() {\n      var result;\n\n      try {\n        result = submit(values, dispatch, props);\n      } catch (submitError) {\n        var error = handleSubmit_isSubmissionError(submitError) ? submitError.errors : undefined;\n        stopSubmit(error);\n        setSubmitFailed.apply(void 0, fields);\n\n        if (onSubmitFail) {\n          onSubmitFail(error, dispatch, submitError, props);\n        }\n\n        if (error || onSubmitFail) {\n          // if you\'ve provided an onSubmitFail callback, don\'t re-throw the error\n          return error;\n        } else {\n          throw submitError;\n        }\n      }\n\n      if (is_promise_default()(result)) {\n        startSubmit();\n        return result.then(function (submitResult) {\n          stopSubmit();\n          setSubmitSucceeded();\n\n          if (onSubmitSuccess) {\n            onSubmitSuccess(submitResult, dispatch, props);\n          }\n\n          return submitResult;\n        }, function (submitError) {\n          var error = handleSubmit_isSubmissionError(submitError) ? submitError.errors : undefined;\n          stopSubmit(error);\n          setSubmitFailed.apply(void 0, fields);\n\n          if (onSubmitFail) {\n            onSubmitFail(error, dispatch, submitError, props);\n          }\n\n          if (error || onSubmitFail) {\n            // if you\'ve provided an onSubmitFail callback, don\'t re-throw the error\n            return error;\n          } else {\n            throw submitError;\n          }\n        });\n      } else {\n        setSubmitSucceeded();\n\n        if (onSubmitSuccess) {\n          onSubmitSuccess(result, dispatch, props);\n        }\n      }\n\n      return result;\n    };\n\n    var asyncValidateResult = asyncValidate && asyncValidate();\n\n    if (asyncValidateResult) {\n      return asyncValidateResult.then(function (asyncErrors) {\n        if (asyncErrors) {\n          throw asyncErrors;\n        }\n\n        return doSubmit();\n      }).catch(function (asyncErrors) {\n        setSubmitFailed.apply(void 0, fields);\n\n        if (onSubmitFail) {\n          onSubmitFail(asyncErrors, dispatch, null, props);\n        }\n\n        return Promise.reject(asyncErrors);\n      });\n    } else {\n      return doSubmit();\n    }\n  } else {\n    setSubmitFailed.apply(void 0, fields);\n    var errors = handleSubmit_mergeErrors({\n      asyncErrors: asyncErrors,\n      syncErrors: syncErrors\n    });\n\n    if (onSubmitFail) {\n      onSubmitFail(errors, dispatch, null, props);\n    }\n\n    return errors;\n  }\n};\n\n/* harmony default export */ var es_handleSubmit = (handleSubmit_handleSubmit);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/hasError.js\nvar getErrorKeys = function getErrorKeys(name, type) {\n  switch (type) {\n    case \'Field\':\n      return [name, name + "._error"];\n\n    case \'FieldArray\':\n      return [name + "._error"];\n\n    default:\n      throw new Error(\'Unknown field type\');\n  }\n};\n\nvar createHasError = function createHasError(_ref) {\n  var getIn = _ref.getIn;\n\n  var hasError = function hasError(field, syncErrors, asyncErrors, submitErrors) {\n    if (!syncErrors && !asyncErrors && !submitErrors) {\n      return false;\n    }\n\n    var name = getIn(field, \'name\');\n    var type = getIn(field, \'type\');\n    return getErrorKeys(name, type).some(function (key) {\n      return getIn(syncErrors, key) || getIn(asyncErrors, key) || getIn(submitErrors, key);\n    });\n  };\n\n  return hasError;\n};\n\n/* harmony default export */ var es_hasError = (createHasError);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/selectors/isValid.js\n\n\nvar isValid_createIsValid = function createIsValid(structure) {\n  var getIn = structure.getIn,\n      keys = structure.keys;\n  var hasError = es_hasError(structure);\n  return function (form, getFormState, ignoreSubmitErrors) {\n    if (ignoreSubmitErrors === void 0) {\n      ignoreSubmitErrors = false;\n    }\n\n    return function (state) {\n      var nonNullGetFormState = getFormState || function (state) {\n        return getIn(state, \'form\');\n      };\n\n      var formState = nonNullGetFormState(state);\n      var syncError = getIn(formState, form + ".syncError");\n\n      if (syncError) {\n        return false;\n      }\n\n      if (!ignoreSubmitErrors) {\n        var error = getIn(formState, form + ".error");\n\n        if (error) {\n          return false;\n        }\n      }\n\n      var syncErrors = getIn(formState, form + ".syncErrors");\n      var asyncErrors = getIn(formState, form + ".asyncErrors");\n      var submitErrors = ignoreSubmitErrors ? undefined : getIn(formState, form + ".submitErrors");\n\n      if (!syncErrors && !asyncErrors && !submitErrors) {\n        return true;\n      }\n\n      var registeredFields = getIn(formState, form + ".registeredFields");\n\n      if (!registeredFields) {\n        return true;\n      }\n\n      return !keys(registeredFields).filter(function (name) {\n        return getIn(registeredFields, "[\'" + name + "\'].count") > 0;\n      }).some(function (name) {\n        return hasError(getIn(registeredFields, "[\'" + name + "\']"), syncErrors, asyncErrors, submitErrors);\n      });\n    };\n  };\n};\n\n/* harmony default export */ var selectors_isValid = (isValid_createIsValid);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/util/getDisplayName.js\nvar getDisplayName_getDisplayName = function getDisplayName(Comp) {\n  return Comp.displayName || Comp.name || \'Component\';\n};\n\n/* harmony default export */ var util_getDisplayName = (getDisplayName_getDisplayName);\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/util/isHotReloading.js\nvar isHotReloading = __webpack_require__(61);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/ReduxFormContext.js\n\n\n\n\nvar ReduxFormContext = react["createContext"](null);\nvar ReduxFormContext_withReduxForm = function withReduxForm(Component) {\n  var Hoc =\n  /*#__PURE__*/\n  function (_React$Component) {\n    inheritsLoose_default()(Hoc, _React$Component);\n\n    function Hoc() {\n      return _React$Component.apply(this, arguments) || this;\n    }\n\n    var _proto = Hoc.prototype;\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          forwardedRef = _this$props.forwardedRef,\n          rest = objectWithoutPropertiesLoose_default()(_this$props, ["forwardedRef"]);\n\n      return react["createElement"](ReduxFormContext.Consumer, {\n        children: function children(_reduxForm) {\n          return react["createElement"](Component, extends_default()({\n            _reduxForm: _reduxForm,\n            ref: forwardedRef\n          }, rest));\n        }\n      });\n    };\n\n    return Hoc;\n  }(react["Component"]);\n\n  var ref = react["forwardRef"](function (props, ref) {\n    return react["createElement"](Hoc, extends_default()({}, props, {\n      forwardedRef: ref\n    }));\n  });\n  ref.displayName = Component.displayName || Component.name || \'Component\';\n  return ref;\n};\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/createReduxForm.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar isClassComponent = function isClassComponent(Component) {\n  return Boolean(Component && Component.prototype && typeof Component.prototype.isReactComponent === \'object\');\n}; // extract field-specific actions\n\n\nvar createReduxForm_arrayInsert = es_actions.arrayInsert,\n    createReduxForm_arrayMove = es_actions.arrayMove,\n    createReduxForm_arrayPop = es_actions.arrayPop,\n    createReduxForm_arrayPush = es_actions.arrayPush,\n    createReduxForm_arrayRemove = es_actions.arrayRemove,\n    createReduxForm_arrayRemoveAll = es_actions.arrayRemoveAll,\n    createReduxForm_arrayShift = es_actions.arrayShift,\n    createReduxForm_arraySplice = es_actions.arraySplice,\n    createReduxForm_arraySwap = es_actions.arraySwap,\n    createReduxForm_arrayUnshift = es_actions.arrayUnshift,\n    createReduxForm_blur = es_actions.blur,\n    createReduxForm_change = es_actions.change,\n    createReduxForm_focus = es_actions.focus,\n    formActions = objectWithoutPropertiesLoose_default()(es_actions, ["arrayInsert", "arrayMove", "arrayPop", "arrayPush", "arrayRemove", "arrayRemoveAll", "arrayShift", "arraySplice", "arraySwap", "arrayUnshift", "blur", "change", "focus"]);\n\nvar arrayActions = {\n  arrayInsert: createReduxForm_arrayInsert,\n  arrayMove: createReduxForm_arrayMove,\n  arrayPop: createReduxForm_arrayPop,\n  arrayPush: createReduxForm_arrayPush,\n  arrayRemove: createReduxForm_arrayRemove,\n  arrayRemoveAll: createReduxForm_arrayRemoveAll,\n  arrayShift: createReduxForm_arrayShift,\n  arraySplice: createReduxForm_arraySplice,\n  arraySwap: createReduxForm_arraySwap,\n  arrayUnshift: createReduxForm_arrayUnshift\n};\nvar propsToNotUpdateFor = [].concat(Object.keys(es_actions), [\'array\', \'asyncErrors\', \'initialValues\', \'syncErrors\', \'syncWarnings\', \'values\', \'registeredFields\']);\n\nvar checkSubmit = function checkSubmit(submit) {\n  if (!submit || typeof submit !== \'function\') {\n    throw new Error(\'You must either pass handleSubmit() an onSubmit function or pass onSubmit as a prop\');\n  }\n\n  return submit;\n};\n\n/**\n * The decorator that is the main API to redux-form\n */\nvar createReduxForm_createReduxForm = function createReduxForm(structure) {\n  var deepEqual = structure.deepEqual,\n      empty = structure.empty,\n      getIn = structure.getIn,\n      setIn = structure.setIn,\n      keys = structure.keys,\n      fromJS = structure.fromJS;\n  var isValid = selectors_isValid(structure);\n  return function (initialConfig) {\n    var config = extends_default()({\n      touchOnBlur: true,\n      touchOnChange: false,\n      persistentSubmitErrors: false,\n      destroyOnUnmount: true,\n      shouldAsyncValidate: es_defaultShouldAsyncValidate,\n      shouldValidate: es_defaultShouldValidate,\n      shouldError: es_defaultShouldError,\n      shouldWarn: es_defaultShouldWarn,\n      enableReinitialize: false,\n      keepDirtyOnReinitialize: false,\n      updateUnregisteredFields: false,\n      getFormState: function getFormState(state) {\n        return getIn(state, \'form\');\n      },\n      pure: true,\n      forceUnregisterOnUnmount: false\n    }, initialConfig);\n\n    return function (WrappedComponent) {\n      var Form =\n      /*#__PURE__*/\n      function (_React$Component) {\n        inheritsLoose_default()(Form, _React$Component);\n\n        function Form() {\n          var _this;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n          _this.wrapped = react_default.a.createRef();\n          _this.destroyed = false;\n          _this.fieldCounts = {};\n          _this.fieldValidators = {};\n          _this.lastFieldValidatorKeys = [];\n          _this.fieldWarners = {};\n          _this.lastFieldWarnerKeys = [];\n          _this.innerOnSubmit = undefined;\n          _this.submitPromise = undefined;\n\n          _this.getValues = function () {\n            return _this.props.values;\n          };\n\n          _this.isValid = function () {\n            return _this.props.valid;\n          };\n\n          _this.isPristine = function () {\n            return _this.props.pristine;\n          };\n\n          _this.register = function (name, type, getValidator, getWarner) {\n            var lastCount = _this.fieldCounts[name];\n            var nextCount = (lastCount || 0) + 1;\n            _this.fieldCounts[name] = nextCount;\n\n            _this.props.registerField(name, type);\n\n            if (getValidator) {\n              _this.fieldValidators[name] = getValidator;\n            }\n\n            if (getWarner) {\n              _this.fieldWarners[name] = getWarner;\n            }\n          };\n\n          _this.unregister = function (name) {\n            var lastCount = _this.fieldCounts[name];\n            if (lastCount === 1) delete _this.fieldCounts[name];else if (lastCount != null) _this.fieldCounts[name] = lastCount - 1;\n\n            if (!_this.destroyed) {\n              var _this$props = _this.props,\n                  _destroyOnUnmount = _this$props.destroyOnUnmount,\n                  forceUnregisterOnUnmount = _this$props.forceUnregisterOnUnmount,\n                  unregisterField = _this$props.unregisterField;\n\n              if (_destroyOnUnmount || forceUnregisterOnUnmount) {\n                unregisterField(name, _destroyOnUnmount);\n\n                if (!_this.fieldCounts[name]) {\n                  delete _this.fieldValidators[name];\n                  delete _this.fieldWarners[name];\n                  _this.lastFieldValidatorKeys = _this.lastFieldValidatorKeys.filter(function (key) {\n                    return key !== name;\n                  });\n                }\n              } else {\n                unregisterField(name, false);\n              }\n            }\n          };\n\n          _this.getFieldList = function (options) {\n            var registeredFields = _this.props.registeredFields;\n            var list = [];\n\n            if (!registeredFields) {\n              return list;\n            }\n\n            var keySeq = keys(registeredFields);\n\n            if (options && options.excludeFieldArray) {\n              keySeq = keySeq.filter(function (name) {\n                return getIn(registeredFields, "[\'" + name + "\'].type") !== \'FieldArray\';\n              });\n            }\n\n            return fromJS(keySeq.reduce(function (acc, key) {\n              acc.push(key);\n              return acc;\n            }, list));\n          };\n\n          _this.getValidators = function () {\n            var validators = {};\n            Object.keys(_this.fieldValidators).forEach(function (name) {\n              var validator = _this.fieldValidators[name]();\n\n              if (validator) {\n                validators[name] = validator;\n              }\n            });\n            return validators;\n          };\n\n          _this.generateValidator = function () {\n            var validators = _this.getValidators();\n\n            return Object.keys(validators).length ? es_generateValidator(validators, structure) : undefined;\n          };\n\n          _this.getWarners = function () {\n            var warners = {};\n            Object.keys(_this.fieldWarners).forEach(function (name) {\n              var warner = _this.fieldWarners[name]();\n\n              if (warner) {\n                warners[name] = warner;\n              }\n            });\n            return warners;\n          };\n\n          _this.generateWarner = function () {\n            var warners = _this.getWarners();\n\n            return Object.keys(warners).length ? es_generateValidator(warners, structure) : undefined;\n          };\n\n          _this.asyncValidate = function (name, value, trigger) {\n            var _this$props2 = _this.props,\n                asyncBlurFields = _this$props2.asyncBlurFields,\n                asyncChangeFields = _this$props2.asyncChangeFields,\n                asyncErrors = _this$props2.asyncErrors,\n                asyncValidate = _this$props2.asyncValidate,\n                dispatch = _this$props2.dispatch,\n                initialized = _this$props2.initialized,\n                pristine = _this$props2.pristine,\n                shouldAsyncValidate = _this$props2.shouldAsyncValidate,\n                startAsyncValidation = _this$props2.startAsyncValidation,\n                stopAsyncValidation = _this$props2.stopAsyncValidation,\n                syncErrors = _this$props2.syncErrors,\n                values = _this$props2.values;\n            var submitting = !name;\n\n            var fieldNeedsValidation = function fieldNeedsValidation() {\n              var fieldNeedsValidationForBlur = asyncBlurFields && name && ~asyncBlurFields.indexOf(name.replace(/\\[[0-9]+\\]/g, \'[]\'));\n              var fieldNeedsValidationForChange = asyncChangeFields && name && ~asyncChangeFields.indexOf(name.replace(/\\[[0-9]+\\]/g, \'[]\'));\n              var asyncValidateByDefault = !(asyncBlurFields || asyncChangeFields);\n              return submitting || asyncValidateByDefault || (trigger === \'blur\' ? fieldNeedsValidationForBlur : fieldNeedsValidationForChange);\n            };\n\n            if (asyncValidate) {\n              var valuesToValidate = submitting ? values : setIn(values, name, value);\n              var syncValidationPasses = submitting || !getIn(syncErrors, name);\n\n              if (fieldNeedsValidation() && shouldAsyncValidate({\n                asyncErrors: asyncErrors,\n                initialized: initialized,\n                trigger: submitting ? \'submit\' : trigger,\n                blurredField: name,\n                pristine: pristine,\n                syncValidationPasses: syncValidationPasses\n              })) {\n                return es_asyncValidation(function () {\n                  return asyncValidate(valuesToValidate, dispatch, _this.props, name);\n                }, startAsyncValidation, stopAsyncValidation, name);\n              }\n            }\n          };\n\n          _this.submitCompleted = function (result) {\n            delete _this.submitPromise;\n            return result;\n          };\n\n          _this.submitFailed = function (error) {\n            delete _this.submitPromise;\n            throw error;\n          };\n\n          _this.listenToSubmit = function (promise) {\n            if (!is_promise_default()(promise)) {\n              return promise;\n            }\n\n            _this.submitPromise = promise;\n            return promise.then(_this.submitCompleted, _this.submitFailed);\n          };\n\n          _this.submit = function (submitOrEvent) {\n            var _this$props3 = _this.props,\n                onSubmit = _this$props3.onSubmit,\n                blur = _this$props3.blur,\n                change = _this$props3.change,\n                dispatch = _this$props3.dispatch;\n\n            if (!submitOrEvent || events_silenceEvent(submitOrEvent)) {\n              // submitOrEvent is an event: fire submit if not already submitting\n              if (!_this.submitPromise) {\n                // avoid recursive stack trace if use Form with onSubmit as handleSubmit\n                if (_this.innerOnSubmit && _this.innerOnSubmit !== _this.submit) {\n                  // will call "submitOrEvent is the submit function" block below\n                  return _this.innerOnSubmit();\n                } else {\n                  return _this.listenToSubmit(es_handleSubmit(checkSubmit(onSubmit), extends_default()({}, _this.props, bindActionCreators({\n                    blur: blur,\n                    change: change\n                  }, dispatch)), _this.props.validExceptSubmit, _this.asyncValidate, _this.getFieldList({\n                    excludeFieldArray: true\n                  })));\n                }\n              }\n            } else {\n              // submitOrEvent is the submit function: return deferred submit thunk\n              return events_silenceEvents(function () {\n                return !_this.submitPromise && _this.listenToSubmit(es_handleSubmit(checkSubmit(submitOrEvent), extends_default()({}, _this.props, bindActionCreators({\n                  blur: blur,\n                  change: change\n                }, dispatch)), _this.props.validExceptSubmit, _this.asyncValidate, _this.getFieldList({\n                  excludeFieldArray: true\n                })));\n              });\n            }\n          };\n\n          _this.reset = function () {\n            return _this.props.reset();\n          };\n\n          return _this;\n        }\n\n        var _proto = Form.prototype;\n\n        _proto.initIfNeeded = function initIfNeeded(nextProps) {\n          var enableReinitialize = this.props.enableReinitialize;\n\n          if (nextProps) {\n            if ((enableReinitialize || !nextProps.initialized) && !deepEqual(this.props.initialValues, nextProps.initialValues)) {\n              var _keepDirty = nextProps.initialized && this.props.keepDirtyOnReinitialize;\n\n              this.props.initialize(nextProps.initialValues, _keepDirty, {\n                keepValues: nextProps.keepValues,\n                lastInitialValues: this.props.initialValues,\n                updateUnregisteredFields: nextProps.updateUnregisteredFields\n              });\n            }\n          } else if (this.props.initialValues && (!this.props.initialized || enableReinitialize)) {\n            this.props.initialize(this.props.initialValues, this.props.keepDirtyOnReinitialize, {\n              keepValues: this.props.keepValues,\n              updateUnregisteredFields: this.props.updateUnregisteredFields\n            });\n          }\n        };\n\n        _proto.updateSyncErrorsIfNeeded = function updateSyncErrorsIfNeeded(nextSyncErrors, nextError, lastSyncErrors) {\n          var _this$props4 = this.props,\n              error = _this$props4.error,\n              updateSyncErrors = _this$props4.updateSyncErrors;\n          var noErrors = (!lastSyncErrors || !Object.keys(lastSyncErrors).length) && !error;\n          var nextNoErrors = (!nextSyncErrors || !Object.keys(nextSyncErrors).length) && !nextError;\n\n          if (!(noErrors && nextNoErrors) && (!plain.deepEqual(lastSyncErrors, nextSyncErrors) || !plain.deepEqual(error, nextError))) {\n            updateSyncErrors(nextSyncErrors, nextError);\n          }\n        };\n\n        _proto.clearSubmitPromiseIfNeeded = function clearSubmitPromiseIfNeeded(nextProps) {\n          var submitting = this.props.submitting;\n\n          if (this.submitPromise && submitting && !nextProps.submitting) {\n            delete this.submitPromise;\n          }\n        };\n\n        _proto.submitIfNeeded = function submitIfNeeded(nextProps) {\n          var _this$props5 = this.props,\n              clearSubmit = _this$props5.clearSubmit,\n              triggerSubmit = _this$props5.triggerSubmit;\n\n          if (!triggerSubmit && nextProps.triggerSubmit) {\n            clearSubmit();\n            this.submit();\n          }\n        };\n\n        _proto.shouldErrorFunction = function shouldErrorFunction() {\n          var _this$props6 = this.props,\n              shouldValidate = _this$props6.shouldValidate,\n              shouldError = _this$props6.shouldError;\n          var shouldValidateOverridden = shouldValidate !== es_defaultShouldValidate;\n          var shouldErrorOverridden = shouldError !== es_defaultShouldError;\n          return shouldValidateOverridden && !shouldErrorOverridden ? shouldValidate : shouldError;\n        };\n\n        _proto.validateIfNeeded = function validateIfNeeded(nextProps) {\n          var _this$props7 = this.props,\n              validate = _this$props7.validate,\n              values = _this$props7.values;\n          var shouldError = this.shouldErrorFunction();\n          var fieldLevelValidate = this.generateValidator();\n\n          if (validate || fieldLevelValidate) {\n            var initialRender = nextProps === undefined;\n            var fieldValidatorKeys = Object.keys(this.getValidators());\n            var validateParams = {\n              values: values,\n              nextProps: nextProps,\n              props: this.props,\n              initialRender: initialRender,\n              lastFieldValidatorKeys: this.lastFieldValidatorKeys,\n              fieldValidatorKeys: fieldValidatorKeys,\n              structure: structure\n            };\n\n            if (shouldError(validateParams)) {\n              var propsToValidate = initialRender || !nextProps ? this.props : nextProps;\n\n              var _merge2 = merge_default()(validate ? validate(propsToValidate.values, propsToValidate) || {} : {}, fieldLevelValidate ? fieldLevelValidate(propsToValidate.values, propsToValidate) || {} : {}),\n                  _error = _merge2._error,\n                  nextSyncErrors = objectWithoutPropertiesLoose_default()(_merge2, ["_error"]);\n\n              this.lastFieldValidatorKeys = fieldValidatorKeys;\n              this.updateSyncErrorsIfNeeded(nextSyncErrors, _error, propsToValidate.syncErrors);\n            }\n          } else {\n            this.lastFieldValidatorKeys = [];\n          }\n        };\n\n        _proto.updateSyncWarningsIfNeeded = function updateSyncWarningsIfNeeded(nextSyncWarnings, nextWarning, lastSyncWarnings) {\n          var _this$props8 = this.props,\n              warning = _this$props8.warning,\n              syncWarnings = _this$props8.syncWarnings,\n              updateSyncWarnings = _this$props8.updateSyncWarnings;\n          var noWarnings = (!syncWarnings || !Object.keys(syncWarnings).length) && !warning;\n          var nextNoWarnings = (!nextSyncWarnings || !Object.keys(nextSyncWarnings).length) && !nextWarning;\n\n          if (!(noWarnings && nextNoWarnings) && (!plain.deepEqual(lastSyncWarnings, nextSyncWarnings) || !plain.deepEqual(warning, nextWarning))) {\n            updateSyncWarnings(nextSyncWarnings, nextWarning);\n          }\n        };\n\n        _proto.shouldWarnFunction = function shouldWarnFunction() {\n          var _this$props9 = this.props,\n              shouldValidate = _this$props9.shouldValidate,\n              shouldWarn = _this$props9.shouldWarn;\n          var shouldValidateOverridden = shouldValidate !== es_defaultShouldValidate;\n          var shouldWarnOverridden = shouldWarn !== es_defaultShouldWarn;\n          return shouldValidateOverridden && !shouldWarnOverridden ? shouldValidate : shouldWarn;\n        };\n\n        _proto.warnIfNeeded = function warnIfNeeded(nextProps) {\n          var _this$props10 = this.props,\n              warn = _this$props10.warn,\n              values = _this$props10.values;\n          var shouldWarn = this.shouldWarnFunction();\n          var fieldLevelWarn = this.generateWarner();\n\n          if (warn || fieldLevelWarn) {\n            var initialRender = nextProps === undefined;\n            var fieldWarnerKeys = Object.keys(this.getWarners());\n            var validateParams = {\n              values: values,\n              nextProps: nextProps,\n              props: this.props,\n              initialRender: initialRender,\n              lastFieldValidatorKeys: this.lastFieldWarnerKeys,\n              fieldValidatorKeys: fieldWarnerKeys,\n              structure: structure\n            };\n\n            if (shouldWarn(validateParams)) {\n              var propsToWarn = initialRender || !nextProps ? this.props : nextProps;\n\n              var _merge3 = merge_default()(warn ? warn(propsToWarn.values, propsToWarn) : {}, fieldLevelWarn ? fieldLevelWarn(propsToWarn.values, propsToWarn) : {}),\n                  _warning = _merge3._warning,\n                  nextSyncWarnings = objectWithoutPropertiesLoose_default()(_merge3, ["_warning"]);\n\n              this.lastFieldWarnerKeys = fieldWarnerKeys;\n              this.updateSyncWarningsIfNeeded(nextSyncWarnings, _warning, propsToWarn.syncWarnings);\n            }\n          }\n        };\n\n        _proto.componentWillMount = function componentWillMount() {\n          if (!Object(isHotReloading["a" /* default */])()) {\n            this.initIfNeeded();\n            this.validateIfNeeded();\n            this.warnIfNeeded();\n          }\n\n          browser_default()(this.props.shouldValidate, \'shouldValidate() is deprecated and will be removed in v9.0.0. Use shouldWarn() or shouldError() instead.\');\n        };\n\n        _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n          this.initIfNeeded(nextProps);\n          this.validateIfNeeded(nextProps);\n          this.warnIfNeeded(nextProps);\n          this.clearSubmitPromiseIfNeeded(nextProps);\n          this.submitIfNeeded(nextProps);\n          var onChange = nextProps.onChange,\n              values = nextProps.values,\n              dispatch = nextProps.dispatch;\n\n          if (onChange && !deepEqual(values, this.props.values)) {\n            onChange(values, dispatch, nextProps, this.props.values);\n          }\n        };\n\n        _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n          var _this2 = this;\n\n          if (!this.props.pure) return true;\n          var _config$immutableProp = config.immutableProps,\n              immutableProps = _config$immutableProp === void 0 ? [] : _config$immutableProp; // if we have children, we MUST update in React 16\n          // https://twitter.com/erikras/status/915866544558788608\n\n          return !!(this.props.children || nextProps.children || Object.keys(nextProps).some(function (prop) {\n            // useful to debug rerenders\n            // if (!plain.deepEqual(this.props[ prop ], nextProps[ prop ])) {\n            //   console.info(prop, \'changed\', this.props[ prop ], \'==>\', nextProps[ prop ])\n            // }\n            if (~immutableProps.indexOf(prop)) {\n              return _this2.props[prop] !== nextProps[prop];\n            }\n\n            return !~propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this2.props[prop], nextProps[prop]);\n          }));\n        };\n\n        _proto.componentDidMount = function componentDidMount() {\n          if (!Object(isHotReloading["a" /* default */])()) {\n            this.initIfNeeded(this.props);\n            this.validateIfNeeded();\n            this.warnIfNeeded();\n          }\n\n          browser_default()(this.props.shouldValidate, \'shouldValidate() is deprecated and will be removed in v9.0.0. Use shouldWarn() or shouldError() instead.\');\n        };\n\n        _proto.componentWillUnmount = function componentWillUnmount() {\n          var _this$props11 = this.props,\n              destroyOnUnmount = _this$props11.destroyOnUnmount,\n              destroy = _this$props11.destroy;\n\n          if (destroyOnUnmount && !Object(isHotReloading["a" /* default */])()) {\n            this.destroyed = true;\n            destroy();\n          }\n        };\n\n        _proto.render = function render() {\n          var _ref,\n              _this3 = this;\n\n          // remove some redux-form config-only props\n\n          /* eslint-disable no-unused-vars */\n          var _this$props12 = this.props,\n              anyTouched = _this$props12.anyTouched,\n              array = _this$props12.array,\n              arrayInsert = _this$props12.arrayInsert,\n              arrayMove = _this$props12.arrayMove,\n              arrayPop = _this$props12.arrayPop,\n              arrayPush = _this$props12.arrayPush,\n              arrayRemove = _this$props12.arrayRemove,\n              arrayRemoveAll = _this$props12.arrayRemoveAll,\n              arrayShift = _this$props12.arrayShift,\n              arraySplice = _this$props12.arraySplice,\n              arraySwap = _this$props12.arraySwap,\n              arrayUnshift = _this$props12.arrayUnshift,\n              asyncErrors = _this$props12.asyncErrors,\n              asyncValidate = _this$props12.asyncValidate,\n              asyncValidating = _this$props12.asyncValidating,\n              blur = _this$props12.blur,\n              change = _this$props12.change,\n              clearSubmit = _this$props12.clearSubmit,\n              destroy = _this$props12.destroy,\n              destroyOnUnmount = _this$props12.destroyOnUnmount,\n              forceUnregisterOnUnmount = _this$props12.forceUnregisterOnUnmount,\n              dirty = _this$props12.dirty,\n              dispatch = _this$props12.dispatch,\n              enableReinitialize = _this$props12.enableReinitialize,\n              error = _this$props12.error,\n              focus = _this$props12.focus,\n              form = _this$props12.form,\n              getFormState = _this$props12.getFormState,\n              immutableProps = _this$props12.immutableProps,\n              initialize = _this$props12.initialize,\n              initialized = _this$props12.initialized,\n              initialValues = _this$props12.initialValues,\n              invalid = _this$props12.invalid,\n              keepDirtyOnReinitialize = _this$props12.keepDirtyOnReinitialize,\n              keepValues = _this$props12.keepValues,\n              updateUnregisteredFields = _this$props12.updateUnregisteredFields,\n              pristine = _this$props12.pristine,\n              propNamespace = _this$props12.propNamespace,\n              registeredFields = _this$props12.registeredFields,\n              registerField = _this$props12.registerField,\n              reset = _this$props12.reset,\n              resetSection = _this$props12.resetSection,\n              setSubmitFailed = _this$props12.setSubmitFailed,\n              setSubmitSucceeded = _this$props12.setSubmitSucceeded,\n              shouldAsyncValidate = _this$props12.shouldAsyncValidate,\n              shouldValidate = _this$props12.shouldValidate,\n              shouldError = _this$props12.shouldError,\n              shouldWarn = _this$props12.shouldWarn,\n              startAsyncValidation = _this$props12.startAsyncValidation,\n              startSubmit = _this$props12.startSubmit,\n              stopAsyncValidation = _this$props12.stopAsyncValidation,\n              stopSubmit = _this$props12.stopSubmit,\n              submitting = _this$props12.submitting,\n              submitFailed = _this$props12.submitFailed,\n              submitSucceeded = _this$props12.submitSucceeded,\n              touch = _this$props12.touch,\n              touchOnBlur = _this$props12.touchOnBlur,\n              touchOnChange = _this$props12.touchOnChange,\n              persistentSubmitErrors = _this$props12.persistentSubmitErrors,\n              syncErrors = _this$props12.syncErrors,\n              syncWarnings = _this$props12.syncWarnings,\n              unregisterField = _this$props12.unregisterField,\n              untouch = _this$props12.untouch,\n              updateSyncErrors = _this$props12.updateSyncErrors,\n              updateSyncWarnings = _this$props12.updateSyncWarnings,\n              valid = _this$props12.valid,\n              validExceptSubmit = _this$props12.validExceptSubmit,\n              values = _this$props12.values,\n              warning = _this$props12.warning,\n              rest = objectWithoutPropertiesLoose_default()(_this$props12, ["anyTouched", "array", "arrayInsert", "arrayMove", "arrayPop", "arrayPush", "arrayRemove", "arrayRemoveAll", "arrayShift", "arraySplice", "arraySwap", "arrayUnshift", "asyncErrors", "asyncValidate", "asyncValidating", "blur", "change", "clearSubmit", "destroy", "destroyOnUnmount", "forceUnregisterOnUnmount", "dirty", "dispatch", "enableReinitialize", "error", "focus", "form", "getFormState", "immutableProps", "initialize", "initialized", "initialValues", "invalid", "keepDirtyOnReinitialize", "keepValues", "updateUnregisteredFields", "pristine", "propNamespace", "registeredFields", "registerField", "reset", "resetSection", "setSubmitFailed", "setSubmitSucceeded", "shouldAsyncValidate", "shouldValidate", "shouldError", "shouldWarn", "startAsyncValidation", "startSubmit", "stopAsyncValidation", "stopSubmit", "submitting", "submitFailed", "submitSucceeded", "touch", "touchOnBlur", "touchOnChange", "persistentSubmitErrors", "syncErrors", "syncWarnings", "unregisterField", "untouch", "updateSyncErrors", "updateSyncWarnings", "valid", "validExceptSubmit", "values", "warning"]);\n          /* eslint-enable no-unused-vars */\n\n\n          var reduxFormProps = extends_default()({\n            array: array,\n            anyTouched: anyTouched,\n            asyncValidate: this.asyncValidate,\n            asyncValidating: asyncValidating\n          }, bindActionCreators({\n            blur: blur,\n            change: change\n          }, dispatch), {\n            clearSubmit: clearSubmit,\n            destroy: destroy,\n            dirty: dirty,\n            dispatch: dispatch,\n            error: error,\n            form: form,\n            handleSubmit: this.submit,\n            initialize: initialize,\n            initialized: initialized,\n            initialValues: initialValues,\n            invalid: invalid,\n            pristine: pristine,\n            reset: reset,\n            resetSection: resetSection,\n            submitting: submitting,\n            submitFailed: submitFailed,\n            submitSucceeded: submitSucceeded,\n            touch: touch,\n            untouch: untouch,\n            valid: valid,\n            warning: warning\n          });\n\n          var propsToPass = extends_default()({}, propNamespace ? (_ref = {}, _ref[propNamespace] = reduxFormProps, _ref) : reduxFormProps, rest);\n\n          if (isClassComponent(WrappedComponent)) {\n            ;\n            propsToPass.ref = this.wrapped;\n          }\n\n          var _reduxForm = extends_default()({}, this.props, {\n            getFormState: function getFormState(state) {\n              return getIn(_this3.props.getFormState(state), _this3.props.form);\n            },\n            asyncValidate: this.asyncValidate,\n            getValues: this.getValues,\n            sectionPrefix: undefined,\n            register: this.register,\n            unregister: this.unregister,\n            registerInnerOnSubmit: function registerInnerOnSubmit(innerOnSubmit) {\n              return _this3.innerOnSubmit = innerOnSubmit;\n            }\n          });\n\n          return Object(react["createElement"])(ReduxFormContext.Provider, {\n            value: _reduxForm,\n            children: Object(react["createElement"])(WrappedComponent, propsToPass)\n          });\n        };\n\n        return Form;\n      }(react_default.a.Component);\n\n      Form.displayName = "Form(" + util_getDisplayName(WrappedComponent) + ")";\n      Form.WrappedComponent = WrappedComponent;\n      Form.propTypes = {\n        destroyOnUnmount: prop_types_default.a.bool,\n        forceUnregisterOnUnmount: prop_types_default.a.bool,\n        form: prop_types_default.a.string.isRequired,\n        immutableProps: prop_types_default.a.arrayOf(prop_types_default.a.string),\n        initialValues: prop_types_default.a.oneOfType([prop_types_default.a.array, prop_types_default.a.object]),\n        getFormState: prop_types_default.a.func,\n        onSubmitFail: prop_types_default.a.func,\n        onSubmitSuccess: prop_types_default.a.func,\n        propNamespace: prop_types_default.a.string,\n        validate: prop_types_default.a.func,\n        warn: prop_types_default.a.func,\n        touchOnBlur: prop_types_default.a.bool,\n        touchOnChange: prop_types_default.a.bool,\n        triggerSubmit: prop_types_default.a.bool,\n        persistentSubmitErrors: prop_types_default.a.bool,\n        registeredFields: prop_types_default.a.any\n      };\n      var connector = connect_connect(function (state, props) {\n        var form = props.form,\n            getFormState = props.getFormState,\n            initialValues = props.initialValues,\n            enableReinitialize = props.enableReinitialize,\n            keepDirtyOnReinitialize = props.keepDirtyOnReinitialize;\n        var formState = getIn(getFormState(state) || empty, form) || empty;\n        var stateInitial = getIn(formState, \'initial\');\n        var initialized = !!stateInitial;\n        var shouldUpdateInitialValues = enableReinitialize && initialized && !deepEqual(initialValues, stateInitial);\n        var shouldResetValues = shouldUpdateInitialValues && !keepDirtyOnReinitialize;\n        var initial = initialValues || stateInitial || empty;\n\n        if (!shouldUpdateInitialValues) {\n          initial = stateInitial || empty;\n        }\n\n        var values = getIn(formState, \'values\') || initial;\n\n        if (shouldResetValues) {\n          values = initial;\n        }\n\n        var pristine = shouldResetValues || deepEqual(initial, values);\n        var asyncErrors = getIn(formState, \'asyncErrors\');\n        var syncErrors = getIn(formState, \'syncErrors\') || plain.empty;\n        var syncWarnings = getIn(formState, \'syncWarnings\') || plain.empty;\n        var registeredFields = getIn(formState, \'registeredFields\');\n        var valid = isValid(form, getFormState, false)(state);\n        var validExceptSubmit = isValid(form, getFormState, true)(state);\n        var anyTouched = !!getIn(formState, \'anyTouched\');\n        var submitting = !!getIn(formState, \'submitting\');\n        var submitFailed = !!getIn(formState, \'submitFailed\');\n        var submitSucceeded = !!getIn(formState, \'submitSucceeded\');\n        var error = getIn(formState, \'error\');\n        var warning = getIn(formState, \'warning\');\n        var triggerSubmit = getIn(formState, \'triggerSubmit\');\n        return {\n          anyTouched: anyTouched,\n          asyncErrors: asyncErrors,\n          asyncValidating: getIn(formState, \'asyncValidating\') || false,\n          dirty: !pristine,\n          error: error,\n          initialized: initialized,\n          invalid: !valid,\n          pristine: pristine,\n          registeredFields: registeredFields,\n          submitting: submitting,\n          submitFailed: submitFailed,\n          submitSucceeded: submitSucceeded,\n          syncErrors: syncErrors,\n          syncWarnings: syncWarnings,\n          triggerSubmit: triggerSubmit,\n          values: values,\n          valid: valid,\n          validExceptSubmit: validExceptSubmit,\n          warning: warning\n        };\n      }, function (dispatch, initialProps) {\n        var bindForm = function bindForm(actionCreator) {\n          return actionCreator.bind(null, initialProps.form);\n        }; // Bind the first parameter on `props.form`\n\n\n        var boundFormACs = mapValues_default()(formActions, bindForm);\n\n        var boundArrayACs = mapValues_default()(arrayActions, bindForm);\n\n        var boundBlur = function boundBlur(field, value) {\n          return createReduxForm_blur(initialProps.form, field, value, !!initialProps.touchOnBlur);\n        };\n\n        var boundChange = function boundChange(field, value) {\n          return createReduxForm_change(initialProps.form, field, value, !!initialProps.touchOnChange, !!initialProps.persistentSubmitErrors);\n        };\n\n        var boundFocus = bindForm(createReduxForm_focus); // Wrap action creators with `dispatch`\n\n        var connectedFormACs = bindActionCreators(boundFormACs, dispatch);\n        var connectedArrayACs = {\n          insert: bindActionCreators(boundArrayACs.arrayInsert, dispatch),\n          move: bindActionCreators(boundArrayACs.arrayMove, dispatch),\n          pop: bindActionCreators(boundArrayACs.arrayPop, dispatch),\n          push: bindActionCreators(boundArrayACs.arrayPush, dispatch),\n          remove: bindActionCreators(boundArrayACs.arrayRemove, dispatch),\n          removeAll: bindActionCreators(boundArrayACs.arrayRemoveAll, dispatch),\n          shift: bindActionCreators(boundArrayACs.arrayShift, dispatch),\n          splice: bindActionCreators(boundArrayACs.arraySplice, dispatch),\n          swap: bindActionCreators(boundArrayACs.arraySwap, dispatch),\n          unshift: bindActionCreators(boundArrayACs.arrayUnshift, dispatch)\n        };\n\n        var computedActions = extends_default()({}, connectedFormACs, boundArrayACs, {\n          blur: boundBlur,\n          change: boundChange,\n          array: connectedArrayACs,\n          focus: boundFocus,\n          dispatch: dispatch\n        });\n\n        return function () {\n          return computedActions;\n        };\n      }, undefined, {\n        forwardRef: true\n      });\n      var ConnectedForm = hoist_non_react_statics_cjs_default()(connector(Form), WrappedComponent);\n      ConnectedForm.defaultProps = config; // build outer component to expose instance api\n\n      var ReduxForm =\n      /*#__PURE__*/\n      function (_React$Component2) {\n        inheritsLoose_default()(ReduxForm, _React$Component2);\n\n        function ReduxForm() {\n          var _this4;\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          _this4 = _React$Component2.call.apply(_React$Component2, [this].concat(args)) || this;\n          _this4.ref = react_default.a.createRef();\n          return _this4;\n        }\n\n        var _proto2 = ReduxForm.prototype;\n\n        _proto2.submit = function submit() {\n          return this.ref.current && this.ref.current.submit();\n        };\n\n        _proto2.reset = function reset() {\n          if (this.ref) {\n            this.ref.current.reset();\n          }\n        };\n\n        _proto2.render = function render() {\n          var _this$props13 = this.props,\n              initialValues = _this$props13.initialValues,\n              rest = objectWithoutPropertiesLoose_default()(_this$props13, ["initialValues"]);\n\n          return Object(react["createElement"])(ConnectedForm, extends_default()({}, rest, {\n            ref: this.ref,\n            // convert initialValues if need to\n            initialValues: fromJS(initialValues)\n          }));\n        };\n\n        createClass_default()(ReduxForm, [{\n          key: "valid",\n          get: function get() {\n            return !!(this.ref.current && this.ref.current.isValid());\n          }\n        }, {\n          key: "invalid",\n          get: function get() {\n            return !this.valid;\n          }\n        }, {\n          key: "pristine",\n          get: function get() {\n            return !!(this.ref.current && this.ref.current.isPristine());\n          }\n        }, {\n          key: "dirty",\n          get: function get() {\n            return !this.pristine;\n          }\n        }, {\n          key: "values",\n          get: function get() {\n            return this.ref.current ? this.ref.current.getValues() : empty;\n          }\n        }, {\n          key: "fieldList",\n          get: function get() {\n            // mainly provided for testing\n            return this.ref.current ? this.ref.current.getFieldList() : [];\n          }\n        }, {\n          key: "wrappedInstance",\n          get: function get() {\n            // for testing\n            return this.ref.current && this.ref.current.wrapped.current;\n          }\n        }]);\n\n        return ReduxForm;\n      }(react_default.a.Component);\n\n      Object(react_lifecycles_compat_es["polyfill"])(ReduxForm);\n      var WithContext = hoist_non_react_statics_cjs_default()(ReduxFormContext_withReduxForm(ReduxForm), WrappedComponent);\n      WithContext.defaultProps = config;\n      return WithContext;\n    };\n  };\n};\n\n/* harmony default export */ var es_createReduxForm = (createReduxForm_createReduxForm);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/reduxForm.js\n\n\n/* harmony default export */ var reduxForm = (es_createReduxForm(plain));\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/createFieldProps.js\n\n\n\nvar createFieldProps_processProps = function processProps(type, props, _value, deepEqual) {\n  var value = props.value;\n\n  if (type === \'checkbox\') {\n    return extends_default()({}, props, {\n      checked: !!value\n    });\n  }\n\n  if (type === \'radio\') {\n    return extends_default()({}, props, {\n      checked: deepEqual(value, _value),\n      value: _value\n    });\n  }\n\n  if (type === \'select-multiple\') {\n    return extends_default()({}, props, {\n      value: value || []\n    });\n  }\n\n  if (type === \'file\') {\n    return extends_default()({}, props, {\n      value: value || undefined\n    });\n  }\n\n  return props;\n};\n\nvar createFieldProps_createFieldProps = function createFieldProps(_ref, name, _ref2) {\n  var getIn = _ref.getIn,\n      toJS = _ref.toJS,\n      deepEqual = _ref.deepEqual;\n\n  var asyncError = _ref2.asyncError,\n      asyncValidating = _ref2.asyncValidating,\n      onBlur = _ref2.onBlur,\n      onChange = _ref2.onChange,\n      onDrop = _ref2.onDrop,\n      onDragStart = _ref2.onDragStart,\n      dirty = _ref2.dirty,\n      dispatch = _ref2.dispatch,\n      onFocus = _ref2.onFocus,\n      form = _ref2.form,\n      format = _ref2.format,\n      initial = _ref2.initial,\n      parse = _ref2.parse,\n      pristine = _ref2.pristine,\n      props = _ref2.props,\n      state = _ref2.state,\n      submitError = _ref2.submitError,\n      submitFailed = _ref2.submitFailed,\n      submitting = _ref2.submitting,\n      syncError = _ref2.syncError,\n      syncWarning = _ref2.syncWarning,\n      validate = _ref2.validate,\n      value = _ref2.value,\n      _value = _ref2._value,\n      warn = _ref2.warn,\n      custom = objectWithoutPropertiesLoose_default()(_ref2, ["asyncError", "asyncValidating", "onBlur", "onChange", "onDrop", "onDragStart", "dirty", "dispatch", "onFocus", "form", "format", "initial", "parse", "pristine", "props", "state", "submitError", "submitFailed", "submitting", "syncError", "syncWarning", "validate", "value", "_value", "warn"]);\n\n  var error = syncError || asyncError || submitError;\n  var warning = syncWarning;\n\n  var formatFieldValue = function formatFieldValue(value, format) {\n    if (format === null) {\n      return value;\n    }\n\n    var defaultFormattedValue = value == null ? \'\' : value;\n    return format ? format(value, name) : defaultFormattedValue;\n  };\n\n  var formattedFieldValue = formatFieldValue(value, format);\n  return {\n    input: createFieldProps_processProps(custom.type, {\n      name: name,\n      onBlur: onBlur,\n      onChange: onChange,\n      onDragStart: onDragStart,\n      onDrop: onDrop,\n      onFocus: onFocus,\n      value: formattedFieldValue\n    }, _value, deepEqual),\n    meta: extends_default()({}, toJS(state), {\n      active: !!(state && getIn(state, \'active\')),\n      asyncValidating: asyncValidating,\n      autofilled: !!(state && getIn(state, \'autofilled\')),\n      dirty: dirty,\n      dispatch: dispatch,\n      error: error,\n      form: form,\n      initial: initial,\n      warning: warning,\n      invalid: !!error,\n      pristine: pristine,\n      submitting: !!submitting,\n      submitFailed: !!submitFailed,\n      touched: !!(state && getIn(state, \'touched\')),\n      valid: !error,\n      visited: !!(state && getIn(state, \'visited\'))\n    }),\n    custom: extends_default()({}, custom, props)\n  };\n};\n\n/* harmony default export */ var es_createFieldProps = (createFieldProps_createFieldProps);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/events/getValue.js\n\n\nvar getSelectedValues = function getSelectedValues(options) {\n  var result = [];\n\n  if (options) {\n    for (var index = 0; index < options.length; index++) {\n      var option = options[index];\n\n      if (option.selected) {\n        result.push(option.value);\n      }\n    }\n  }\n\n  return result;\n};\n\nvar getValue_getValue = function getValue(event, isReactNative) {\n  if (events_isEvent(event)) {\n    if (!isReactNative && event.nativeEvent && event.nativeEvent.text !== undefined) {\n      return event.nativeEvent.text;\n    }\n\n    if (isReactNative && event.nativeEvent !== undefined) {\n      return event.nativeEvent.text;\n    }\n\n    var detypedEvent = event;\n    var _detypedEvent$target = detypedEvent.target,\n        type = _detypedEvent$target.type,\n        value = _detypedEvent$target.value,\n        checked = _detypedEvent$target.checked,\n        files = _detypedEvent$target.files,\n        dataTransfer = detypedEvent.dataTransfer;\n\n    if (type === \'checkbox\') {\n      return !!checked;\n    }\n\n    if (type === \'file\') {\n      return files || dataTransfer && dataTransfer.files;\n    }\n\n    if (type === \'select-multiple\') {\n      return getSelectedValues(event.target.options);\n    }\n\n    return value;\n  }\n\n  return event;\n};\n\n/* harmony default export */ var events_getValue = (getValue_getValue);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/isReactNative.js\nvar isReactNative_isReactNative = typeof window !== \'undefined\' && window.navigator && window.navigator.product && window.navigator.product === \'ReactNative\';\n/* harmony default export */ var es_isReactNative = (isReactNative_isReactNative);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/events/onChangeValue.js\n\n\n\nvar onChangeValue_onChangeValue = function onChangeValue(event, _ref) {\n  var name = _ref.name,\n      parse = _ref.parse,\n      normalize = _ref.normalize;\n  // read value from input\n  var value = events_getValue(event, es_isReactNative); // parse value if we have a parser\n\n  if (parse) {\n    value = parse(value, name);\n  } // normalize value\n\n\n  if (normalize) {\n    value = normalize(name, value);\n  }\n\n  return value;\n};\n\n/* harmony default export */ var events_onChangeValue = (onChangeValue_onChangeValue);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/util/eventConsts.js\nvar dataKey = \'text\';\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/util/validateComponentProp.js\n\n\nvar validateComponentProp_validateComponentProp = function validateComponentProp(props, propName, componentName) {\n  if (!Object(react_is["isValidElementType"])(props[propName])) {\n    return new Error(\'Invalid prop `\' + propName + \'` supplied to\' + \' `\' + componentName + \'`.\');\n  }\n\n  return null;\n};\n\n/* harmony default export */ var util_validateComponentProp = (validateComponentProp_validateComponentProp);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/ConnectedField.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar ConnectedField_propsToNotUpdateFor = [\'_reduxForm\'];\n\nvar isObject = function isObject(entity) {\n  return entity && typeof entity === \'object\';\n};\n\nvar ConnectedField_isFunction = function isFunction(entity) {\n  return entity && typeof entity === \'function\';\n};\n\nvar eventPreventDefault = function eventPreventDefault(event) {\n  if (isObject(event) && ConnectedField_isFunction(event.preventDefault)) {\n    event.preventDefault();\n  }\n};\n\nvar eventDataTransferGetData = function eventDataTransferGetData(event, key) {\n  if (isObject(event) && isObject(event.dataTransfer) && ConnectedField_isFunction(event.dataTransfer.getData)) {\n    return event.dataTransfer.getData(key);\n  }\n};\n\nvar eventDataTransferSetData = function eventDataTransferSetData(event, key, value) {\n  if (isObject(event) && isObject(event.dataTransfer) && ConnectedField_isFunction(event.dataTransfer.setData)) {\n    event.dataTransfer.setData(key, value);\n  }\n};\n\nvar ConnectedField_createConnectedField = function createConnectedField(structure) {\n  var deepEqual = structure.deepEqual,\n      getIn = structure.getIn;\n\n  var getSyncError = function getSyncError(syncErrors, name) {\n    var error = plain.getIn(syncErrors, name); // Because the error for this field might not be at a level in the error structure where\n    // it can be set directly, it might need to be unwrapped from the _error property\n\n    return error && error._error ? error._error : error;\n  };\n\n  var getSyncWarning = function getSyncWarning(syncWarnings, name) {\n    var warning = getIn(syncWarnings, name); // Because the warning for this field might not be at a level in the warning structure where\n    // it can be set directly, it might need to be unwrapped from the _warning property\n\n    return warning && warning._warning ? warning._warning : warning;\n  };\n\n  var ConnectedField =\n  /*#__PURE__*/\n  function (_Component) {\n    inheritsLoose_default()(ConnectedField, _Component);\n\n    function ConnectedField() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n      _this.ref = react_default.a.createRef();\n\n      _this.isPristine = function () {\n        return _this.props.pristine;\n      };\n\n      _this.getValue = function () {\n        return _this.props.value;\n      };\n\n      _this.handleChange = function (event) {\n        var _this$props = _this.props,\n            name = _this$props.name,\n            dispatch = _this$props.dispatch,\n            parse = _this$props.parse,\n            normalize = _this$props.normalize,\n            onChange = _this$props.onChange,\n            _reduxForm = _this$props._reduxForm,\n            previousValue = _this$props.value;\n        var newValue = events_onChangeValue(event, {\n          name: name,\n          parse: parse,\n          normalize: normalize\n        });\n        var defaultPrevented = false;\n\n        if (onChange) {\n          // Can\'t seem to find a way to extend Event in React Native,\n          // thus I simply avoid adding preventDefault() in a RN environment\n          // to prevent the following error:\n          // `One of the sources for assign has an enumerable key on the prototype chain`\n          // Reference: https://github.com/facebook/react-native/issues/5507\n          if (!es_isReactNative && events_isEvent(event)) {\n            onChange(extends_default()({}, event, {\n              preventDefault: function preventDefault() {\n                defaultPrevented = true;\n                return eventPreventDefault(event);\n              }\n            }), newValue, previousValue, name);\n          } else {\n            defaultPrevented = onChange(event, newValue, previousValue, name);\n          }\n        }\n\n        if (!defaultPrevented) {\n          // dispatch change action\n          dispatch(_reduxForm.change(name, newValue)); // call post-change callback\n\n          if (_reduxForm.asyncValidate) {\n            _reduxForm.asyncValidate(name, newValue, \'change\');\n          }\n        }\n      };\n\n      _this.handleFocus = function (event) {\n        var _this$props2 = _this.props,\n            name = _this$props2.name,\n            dispatch = _this$props2.dispatch,\n            onFocus = _this$props2.onFocus,\n            _reduxForm = _this$props2._reduxForm;\n        var defaultPrevented = false;\n\n        if (onFocus) {\n          if (!es_isReactNative) {\n            onFocus(extends_default()({}, event, {\n              preventDefault: function preventDefault() {\n                defaultPrevented = true;\n                return eventPreventDefault(event);\n              }\n            }), name);\n          } else {\n            defaultPrevented = onFocus(event, name);\n          }\n        }\n\n        if (!defaultPrevented) {\n          dispatch(_reduxForm.focus(name));\n        }\n      };\n\n      _this.handleBlur = function (event) {\n        var _this$props3 = _this.props,\n            name = _this$props3.name,\n            dispatch = _this$props3.dispatch,\n            parse = _this$props3.parse,\n            normalize = _this$props3.normalize,\n            onBlur = _this$props3.onBlur,\n            _reduxForm = _this$props3._reduxForm,\n            _value = _this$props3._value,\n            previousValue = _this$props3.value;\n        var newValue = events_onChangeValue(event, {\n          name: name,\n          parse: parse,\n          normalize: normalize\n        }); // for checkbox and radio, if the value property of checkbox or radio equals\n        // the value passed by blur event, then fire blur action with previousValue.\n\n        if (newValue === _value && _value !== undefined) {\n          newValue = previousValue;\n        }\n\n        var defaultPrevented = false;\n\n        if (onBlur) {\n          if (!es_isReactNative) {\n            onBlur(extends_default()({}, event, {\n              preventDefault: function preventDefault() {\n                defaultPrevented = true;\n                return eventPreventDefault(event);\n              }\n            }), newValue, previousValue, name);\n          } else {\n            defaultPrevented = onBlur(event, newValue, previousValue, name);\n          }\n        }\n\n        if (!defaultPrevented) {\n          // dispatch blur action\n          dispatch(_reduxForm.blur(name, newValue)); // call post-blur callback\n\n          if (_reduxForm.asyncValidate) {\n            _reduxForm.asyncValidate(name, newValue, \'blur\');\n          }\n        }\n      };\n\n      _this.handleDragStart = function (event) {\n        var _this$props4 = _this.props,\n            name = _this$props4.name,\n            onDragStart = _this$props4.onDragStart,\n            value = _this$props4.value;\n        eventDataTransferSetData(event, dataKey, value == null ? \'\' : value);\n\n        if (onDragStart) {\n          onDragStart(event, name);\n        }\n      };\n\n      _this.handleDrop = function (event) {\n        var _this$props5 = _this.props,\n            name = _this$props5.name,\n            dispatch = _this$props5.dispatch,\n            onDrop = _this$props5.onDrop,\n            _reduxForm = _this$props5._reduxForm,\n            previousValue = _this$props5.value;\n        var newValue = eventDataTransferGetData(event, dataKey);\n        var defaultPrevented = false;\n\n        if (onDrop) {\n          onDrop(extends_default()({}, event, {\n            preventDefault: function preventDefault() {\n              defaultPrevented = true;\n              return eventPreventDefault(event);\n            }\n          }), newValue, previousValue, name);\n        }\n\n        if (!defaultPrevented) {\n          // dispatch change action\n          dispatch(_reduxForm.change(name, newValue));\n          eventPreventDefault(event);\n        }\n      };\n\n      return _this;\n    }\n\n    var _proto = ConnectedField.prototype;\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {\n      var _this2 = this;\n\n      var nextPropsKeys = Object.keys(nextProps);\n      var thisPropsKeys = Object.keys(this.props); // if we have children, we MUST update in React 16\n      // https://twitter.com/erikras/status/915866544558788608\n\n      return !!(this.props.children || nextProps.children || nextPropsKeys.length !== thisPropsKeys.length || nextPropsKeys.some(function (prop) {\n        if (~(nextProps.immutableProps || []).indexOf(prop)) {\n          return _this2.props[prop] !== nextProps[prop];\n        }\n\n        return !~ConnectedField_propsToNotUpdateFor.indexOf(prop) && !deepEqual(_this2.props[prop], nextProps[prop]);\n      }));\n    };\n\n    _proto.getRenderedComponent = function getRenderedComponent() {\n      return this.ref.current;\n    };\n\n    _proto.render = function render() {\n      var _this$props6 = this.props,\n          component = _this$props6.component,\n          forwardRef = _this$props6.forwardRef,\n          name = _this$props6.name,\n          _reduxForm = _this$props6._reduxForm,\n          normalize = _this$props6.normalize,\n          onBlur = _this$props6.onBlur,\n          onChange = _this$props6.onChange,\n          onFocus = _this$props6.onFocus,\n          onDragStart = _this$props6.onDragStart,\n          onDrop = _this$props6.onDrop,\n          immutableProps = _this$props6.immutableProps,\n          rest = objectWithoutPropertiesLoose_default()(_this$props6, ["component", "forwardRef", "name", "_reduxForm", "normalize", "onBlur", "onChange", "onFocus", "onDragStart", "onDrop", "immutableProps"]);\n\n      var _createFieldProps = es_createFieldProps(structure, name, extends_default()({}, rest, {\n        form: _reduxForm.form,\n        onBlur: this.handleBlur,\n        onChange: this.handleChange,\n        onDrop: this.handleDrop,\n        onDragStart: this.handleDragStart,\n        onFocus: this.handleFocus\n      })),\n          custom = _createFieldProps.custom,\n          props = objectWithoutPropertiesLoose_default()(_createFieldProps, ["custom"]);\n\n      if (forwardRef) {\n        custom.ref = this.ref;\n      }\n\n      if (typeof component === \'string\') {\n        var input = props.input,\n            meta = props.meta; // eslint-disable-line no-unused-vars\n        // flatten input into other props\n\n        return Object(react["createElement"])(component, extends_default()({}, input, custom));\n      } else {\n        return Object(react["createElement"])(component, extends_default()({}, props, custom));\n      }\n    };\n\n    return ConnectedField;\n  }(react["Component"]);\n\n  ConnectedField.propTypes = {\n    component: util_validateComponentProp,\n    props: prop_types_default.a.object\n  };\n  var connector = connect_connect(function (state, ownProps) {\n    var name = ownProps.name,\n        _ownProps$_reduxForm = ownProps._reduxForm,\n        initialValues = _ownProps$_reduxForm.initialValues,\n        getFormState = _ownProps$_reduxForm.getFormState;\n    var formState = getFormState(state);\n    var initialState = getIn(formState, "initial." + name);\n    var initial = initialState !== undefined ? initialState : initialValues && getIn(initialValues, name);\n    var value = getIn(formState, "values." + name);\n    var submitting = getIn(formState, \'submitting\');\n    var syncError = getSyncError(getIn(formState, \'syncErrors\'), name);\n    var syncWarning = getSyncWarning(getIn(formState, \'syncWarnings\'), name);\n    var pristine = deepEqual(value, initial);\n    return {\n      asyncError: getIn(formState, "asyncErrors." + name),\n      asyncValidating: getIn(formState, \'asyncValidating\') === name,\n      dirty: !pristine,\n      pristine: pristine,\n      state: getIn(formState, "fields." + name),\n      submitError: getIn(formState, "submitErrors." + name),\n      submitFailed: getIn(formState, \'submitFailed\'),\n      submitting: submitting,\n      syncError: syncError,\n      syncWarning: syncWarning,\n      initial: initial,\n      value: value,\n      _value: ownProps.value // save value passed in (for radios)\n\n    };\n  }, undefined, undefined, {\n    forwardRef: true\n  });\n  return connector(ConnectedField);\n};\n\n/* harmony default export */ var es_ConnectedField = (ConnectedField_createConnectedField);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/util/shallowCompare.js\n\n\nvar shallowCompare_customizer = function customizer(objectValue, otherValue, indexOrkey, object, other, stack) {\n  // https://lodash.com/docs/4.17.4#isEqualWith\n  if (stack) {\n    // Shallow compares\n    // For 1st level, stack === undefined.\n    //   -> Do nothing (and implicitly return undefined so that it goes to compare 2nd level)\n    // For 2nd level and up, stack !== undefined.\n    //   -> Compare by === operator\n    return objectValue === otherValue;\n  }\n};\n\nvar shallowCompare_shallowCompare = function shallowCompare(instance, nextProps, nextState) {\n  var propsEqual = isEqualWith_default()(instance.props, nextProps, shallowCompare_customizer);\n\n  var stateEqual = isEqualWith_default()(instance.state, nextState, shallowCompare_customizer);\n\n  return !propsEqual || !stateEqual;\n};\n\n/* harmony default export */ var util_shallowCompare = (shallowCompare_shallowCompare);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/util/prefixName.js\nvar formatName = function formatName(_ref, name) {\n  var sectionPrefix = _ref._reduxForm.sectionPrefix;\n  return sectionPrefix ? sectionPrefix + "." + name : name;\n};\n\n/* harmony default export */ var prefixName = (formatName);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/createField.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar createField_createField = function createField(structure) {\n  var ConnectedField = es_ConnectedField(structure);\n  var setIn = structure.setIn;\n\n  var Field =\n  /*#__PURE__*/\n  function (_Component) {\n    inheritsLoose_default()(Field, _Component);\n\n    function Field(props) {\n      var _this;\n\n      _this = _Component.call(this, props) || this;\n      _this.ref = react_default.a.createRef();\n      _this.ref = react_default.a.createRef();\n\n      _this.normalize = function (name, value) {\n        var normalize = _this.props.normalize;\n\n        if (!normalize) {\n          return value;\n        }\n\n        var previousValues = _this.props._reduxForm.getValues();\n\n        var previousValue = _this.value;\n        var nextValues = setIn(previousValues, name, value);\n        return normalize(value, previousValue, nextValues, previousValues, name);\n      };\n\n      if (!props._reduxForm) {\n        throw new Error(\'Field must be inside a component decorated with reduxForm()\');\n      }\n\n      return _this;\n    }\n\n    var _proto = Field.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      var _this2 = this;\n\n      this.props._reduxForm.register(this.name, \'Field\', function () {\n        return _this2.props.validate;\n      }, function () {\n        return _this2.props.warn;\n      });\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      return util_shallowCompare(this, nextProps, nextState);\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var oldName = prefixName(this.props, this.props.name);\n      var newName = prefixName(nextProps, nextProps.name);\n\n      if (oldName !== newName || // use deepEqual here because they could be a function or an array of functions\n      !plain.deepEqual(this.props.validate, nextProps.validate) || !plain.deepEqual(this.props.warn, nextProps.warn)) {\n        // unregister old name\n        this.props._reduxForm.unregister(oldName); // register new name\n\n\n        this.props._reduxForm.register(newName, \'Field\', function () {\n          return nextProps.validate;\n        }, function () {\n          return nextProps.warn;\n        });\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.props._reduxForm.unregister(this.name);\n    };\n\n    _proto.getRenderedComponent = function getRenderedComponent() {\n      browser_default()(this.props.forwardRef, \'If you want to access getRenderedComponent(), \' + \'you must specify a forwardRef prop to Field\');\n      return this.ref.current ? this.ref.current.getRenderedComponent() : undefined;\n    };\n\n    _proto.render = function render() {\n      return Object(react["createElement"])(ConnectedField, extends_default()({}, this.props, {\n        name: this.name,\n        normalize: this.normalize,\n        ref: this.ref\n      }));\n    };\n\n    createClass_default()(Field, [{\n      key: "name",\n      get: function get() {\n        return prefixName(this.props, this.props.name);\n      }\n    }, {\n      key: "dirty",\n      get: function get() {\n        return !this.pristine;\n      }\n    }, {\n      key: "pristine",\n      get: function get() {\n        return !!(this.ref.current && this.ref.current.isPristine());\n      }\n    }, {\n      key: "value",\n      get: function get() {\n        return this.ref.current && this.ref.current.getValue();\n      }\n    }]);\n\n    return Field;\n  }(react["Component"]);\n\n  Field.propTypes = {\n    name: prop_types_default.a.string.isRequired,\n    component: util_validateComponentProp,\n    format: prop_types_default.a.func,\n    normalize: prop_types_default.a.func,\n    onBlur: prop_types_default.a.func,\n    onChange: prop_types_default.a.func,\n    onFocus: prop_types_default.a.func,\n    onDragStart: prop_types_default.a.func,\n    onDrop: prop_types_default.a.func,\n    parse: prop_types_default.a.func,\n    props: prop_types_default.a.object,\n    validate: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.arrayOf(prop_types_default.a.func)]),\n    warn: prop_types_default.a.oneOfType([prop_types_default.a.func, prop_types_default.a.arrayOf(prop_types_default.a.func)]),\n    forwardRef: prop_types_default.a.bool,\n    immutableProps: prop_types_default.a.arrayOf(prop_types_default.a.string),\n    _reduxForm: prop_types_default.a.object\n  };\n  Object(react_lifecycles_compat_es["polyfill"])(Field);\n  return ReduxFormContext_withReduxForm(Field);\n};\n\n/* harmony default export */ var es_createField = (createField_createField);\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/redux-form/es/Field.js\n\n\n/* harmony default export */ var es_Field = (es_createField(plain));\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/FormControl/index.js\nvar FormControl = __webpack_require__(86);\nvar FormControl_default = /*#__PURE__*/__webpack_require__.n(FormControl);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/Grid/index.js\nvar Grid = __webpack_require__(106);\nvar Grid_default = /*#__PURE__*/__webpack_require__.n(Grid);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/InputLabel/index.js\nvar InputLabel = __webpack_require__(84);\nvar InputLabel_default = /*#__PURE__*/__webpack_require__.n(InputLabel);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/MenuItem/index.js\nvar MenuItem = __webpack_require__(209);\nvar MenuItem_default = /*#__PURE__*/__webpack_require__.n(MenuItem);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/Select/index.js\nvar Select = __webpack_require__(67);\nvar Select_default = /*#__PURE__*/__webpack_require__.n(Select);\n\n// EXTERNAL MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/TextField/index.js\nvar TextField = __webpack_require__(138);\nvar TextField_default = /*#__PURE__*/__webpack_require__.n(TextField);\n\n// CONCATENATED MODULE: C:/Users/user/git_workspace/TechOffice-React/900-Library/010-Main/node_modules/@material-ui/core/index.es.js\n/** @license Material-UI v3.8.3\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// CONCATENATED MODULE: ./src/form/control/TextField.tsx\nfunction TextField_extends() { TextField_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return TextField_extends.apply(this, arguments); }\n\n\n\n/* harmony default export */ var control_TextField = (function (field) {\n  return react["createElement"](TextField_default.a, TextField_extends({}, field.input, {\n    label: field.label,\n    required: field.required,\n    disabled: field.disabled\n  }));\n});\n// CONCATENATED MODULE: ./src/form/control/Select.tsx\nfunction Select_extends() { Select_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return Select_extends.apply(this, arguments); }\n\n\n\n/* harmony default export */ var control_Select = (function (field) {\n  return react["createElement"](FormControl_default.a, {\n    style: {\n      minWidth: 120\n    }\n  }, react["createElement"](InputLabel_default.a, null, field.label), react["createElement"](Select_default.a, Select_extends({}, field.input, {\n    required: field.required,\n    disabled: field.disabled\n  }), field.children));\n});\n// CONCATENATED MODULE: ./src/form/control/RemoteSelect.tsx\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction RemoteSelect_extends() { RemoteSelect_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return RemoteSelect_extends.apply(this, arguments); }\n\nfunction RemoteSelect_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction RemoteSelect_possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return RemoteSelect_assertThisInitialized(self); }\n\nfunction RemoteSelect_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction RemoteSelect_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\nvar RemoteSelect_RemoteSelect =\n/*#__PURE__*/\nfunction (_React$Component) {\n  RemoteSelect_inherits(RemoteSelect, _React$Component);\n\n  function RemoteSelect(props) {\n    var _this;\n\n    RemoteSelect_classCallCheck(this, RemoteSelect);\n\n    _this = RemoteSelect_possibleConstructorReturn(this, _getPrototypeOf(RemoteSelect).call(this, props));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(RemoteSelect, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      setTimeout(function () {\n        _this2.updateState({\n          select: react["createElement"](Select_default.a, RemoteSelect_extends({}, _this2.props.input, {\n            required: _this2.props.required,\n            disabled: _this2.props.disabled\n          }), react["createElement"](MenuItem_default.a, {\n            value: 10\n          }, "Ten"), react["createElement"](MenuItem_default.a, {\n            value: 20\n          }, "Twenty"), react["createElement"](MenuItem_default.a, {\n            value: 30\n          }, "Thirty"))\n        });\n      }, 3000);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return react["createElement"](FormControl_default.a, {\n        style: {\n          minWidth: 120\n        }\n      }, react["createElement"](InputLabel_default.a, null, this.props.label), this.state.select);\n    }\n  }]);\n\n  return RemoteSelect;\n}(react["Component"]);\n\n\n// CONCATENATED MODULE: ./src/SimpleFormComponent.tsx\nvar _dec, _dec2, _class;\n\nfunction SimpleFormComponent_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { SimpleFormComponent_typeof = function _typeof(obj) { return typeof obj; }; } else { SimpleFormComponent_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return SimpleFormComponent_typeof(obj); }\n\nfunction SimpleFormComponent_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction SimpleFormComponent_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction SimpleFormComponent_createClass(Constructor, protoProps, staticProps) { if (protoProps) SimpleFormComponent_defineProperties(Constructor.prototype, protoProps); if (staticProps) SimpleFormComponent_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction SimpleFormComponent_possibleConstructorReturn(self, call) { if (call && (SimpleFormComponent_typeof(call) === "object" || typeof call === "function")) { return call; } return SimpleFormComponent_assertThisInitialized(self); }\n\nfunction SimpleFormComponent_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction SimpleFormComponent_getPrototypeOf(o) { SimpleFormComponent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return SimpleFormComponent_getPrototypeOf(o); }\n\nfunction SimpleFormComponent_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) SimpleFormComponent_setPrototypeOf(subClass, superClass); }\n\nfunction SimpleFormComponent_setPrototypeOf(o, p) { SimpleFormComponent_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return SimpleFormComponent_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\n/**\r\n * Simple Form Component \r\n */\n\nvar SimpleFormComponent_SimpleFormComponent = (_dec = connect_connect( // map state to props\nfunction (state) {\n  // console.log(state);\n  return {\n    simple: state && state.form && state.form.simple && state.form.simple.values ? state.form.simple.values : {}\n  };\n}, // map dispatch to props\nfunction (dispatch) {\n  return {};\n}), _dec2 = reduxForm({\n  form: \'simple\'\n}), _dec(_class = _dec2(_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  SimpleFormComponent_inherits(SimpleFormComponent, _React$Component);\n\n  function SimpleFormComponent(props) {\n    var _this;\n\n    SimpleFormComponent_classCallCheck(this, SimpleFormComponent);\n\n    _this = SimpleFormComponent_possibleConstructorReturn(this, SimpleFormComponent_getPrototypeOf(SimpleFormComponent).call(this, props));\n    _this.state = props;\n    return _this;\n  }\n\n  SimpleFormComponent_createClass(SimpleFormComponent, [{\n    key: "render",\n    value: function render() {\n      return react["createElement"]("form", null, react["createElement"](Grid_default.a, {\n        container: true\n      }, react["createElement"](Grid_default.a, {\n        item: true\n      }, react["createElement"](es_Field, {\n        name: "simpleTextField1",\n        label: "Simple Text Field 1",\n        component: control_TextField\n      }))), react["createElement"](Grid_default.a, {\n        container: true\n      }, react["createElement"](Grid_default.a, {\n        item: true\n      }, react["createElement"](es_Field, {\n        name: "simpleSelectField",\n        label: "Simple Select",\n        component: control_Select\n      }, react["createElement"](MenuItem_default.a, {\n        value: 10\n      }, "Ten"), react["createElement"](MenuItem_default.a, {\n        value: 20\n      }, "Twenty"), react["createElement"](MenuItem_default.a, {\n        value: 30\n      }, "Thirty")))), react["createElement"](Grid_default.a, {\n        container: true\n      }, react["createElement"](Grid_default.a, {\n        item: true\n      }, react["createElement"](es_Field, {\n        name: "remoteSelectField",\n        label: "Remote Select",\n        component: RemoteSelect_RemoteSelect\n      }))));\n    }\n  }]);\n\n  return SimpleFormComponent;\n}(react["Component"])) || _class) || _class);\n\n// CONCATENATED MODULE: ./src/App.tsx\nvar App_dec, App_class;\n\nfunction App_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { App_typeof = function _typeof(obj) { return typeof obj; }; } else { App_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return App_typeof(obj); }\n\nfunction App_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction App_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction App_createClass(Constructor, protoProps, staticProps) { if (protoProps) App_defineProperties(Constructor.prototype, protoProps); if (staticProps) App_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction App_possibleConstructorReturn(self, call) { if (call && (App_typeof(call) === "object" || typeof call === "function")) { return call; } return App_assertThisInitialized(self); }\n\nfunction App_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction App_getPrototypeOf(o) { App_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return App_getPrototypeOf(o); }\n\nfunction App_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) App_setPrototypeOf(subClass, superClass); }\n\nfunction App_setPrototypeOf(o, p) { App_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return App_setPrototypeOf(o, p); }\n\n\n\n\n\n\n\nvar rootReducer = combineReducers({\n  form: es_reducer\n});\nvar App_store = createStore_createStore(rootReducer);\nvar App_App = (App_dec = connect_connect( // map state to props\nfunction (state) {\n  // console.log(state);\n  return {\n    simple: state && state.form && state.form.simple && state.form.simple.values ? state.form.simple.values : {},\n    form: state && state.form && state.form.simple ? state.form.simple : {}\n  };\n}, // map dispatch to props\nfunction (dispatch) {\n  return {};\n}), App_dec(App_class =\n/*#__PURE__*/\nfunction (_React$Component) {\n  App_inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    App_classCallCheck(this, App);\n\n    _this = App_possibleConstructorReturn(this, App_getPrototypeOf(App).call(this, props));\n    _this.state = props;\n    return _this;\n  }\n\n  App_createClass(App, [{\n    key: "componentWillReceiveProps",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(\'componentWillReceiveProps\', nextProps);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return react["createElement"]("div", null, react["createElement"]("h1", null, "Hello World"), react["createElement"](SimpleFormComponent_SimpleFormComponent, null), react["createElement"]("div", null, this.props.simple.simpleTextField1), react["createElement"]("div", null, this.props.simple.simpleSelectField), react["createElement"]("div", null, this.props.simple.remoteSelectField));\n    }\n  }]);\n\n  return App;\n}(react["Component"])) || App_class);\nreact_dom["render"](react["createElement"](components_Provider, {\n  store: App_store\n}, react["createElement"](App_App, null)), document.getElementById(\'app\'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///455\n')}});